<<<<<<< HEAD
{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/article-title.md","hash":"8a2b7eb0137aa723d0946cd95dae83bee66ba46a","modified":1654057302604},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1654049478442},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1654049477980},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1654049478399},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1654049478107},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1654049478447},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1654049478567},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1654049478435},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1654049478569},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1654049478575},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1654049478574},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1654049478576},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1654049478570},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1654049478578},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1654049478578},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1654049478579},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1654049478581},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1654049478583},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1654049478580},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1654049478584},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1654049478229},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1654049478295},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1654049478255},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1654049478311},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1654049478314},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1654049478300},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1654049478334},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1654049478193},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1654049478393},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1654049478200},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1654049478208},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1654049478235},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1654049478266},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1654049478277},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1654049478282},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1654049478304},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1654049478286},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1654049478321},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1654049478292},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1654049478221},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1654049478251},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1654049478330},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1654049478337},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1654049478318},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1654049478520},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1654049478521},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1654049478548},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1654049478353},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1654049478359},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1654049478357},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1654049478514},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1654049478517},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1654049478516},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1654049478179},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1654049478422},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1654049478427},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1654049478430},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1654049478243},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1654049478260},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1654049478273},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1654049478308},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1654049478339},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1654049478326},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1654049478523},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1654049478526},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1654049478532},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1654049478529},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1654049478535},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1654049478539},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1654049478537},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1654049478541},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1654049478543},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1654049478544},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1654049478534},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1654049478539},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1654049478509},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1654049478348},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1654049478563},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1654049478512},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1654049478151},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1654049478413},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1654049478417},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1654049478162},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1654049478418},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1654049478560},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1654049478556},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1654049478377},{"_id":"public/index.html","hash":"f22e5349091eb1fbb31c8ab48c7f897e3a5a3b57","modified":1654077935482},{"_id":"public/2022/06/01/article-title/index.html","hash":"06d299ef97c456561c262ce10a17d16ffc284588","modified":1654077239055},{"_id":"public/2022/06/01/hello-world/index.html","hash":"5ebb6866d9e70526442ed2054dd123b80f3ea094","modified":1654077239055},{"_id":"public/archives/2022/index.html","hash":"ef13a143aa45fa2f2cb9a2af7070507414127cdd","modified":1654077935482},{"_id":"public/archives/index.html","hash":"34be49c53923acee096e7403c0d1717e4e29e86e","modified":1654077935482},{"_id":"public/archives/2022/06/index.html","hash":"99263fe03a8de93a81047b5a245b4d2fed95852d","modified":1654077935482},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1654057447666},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1654057447666},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1654057447666},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1654057447666},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1654057447666},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1654057447666},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1654057447666},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1654057447666},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1654057447666},{"_id":"public/css/style.css","hash":"3986ef4b1f56bf0ac3bc45aab261e0278794c3f1","modified":1654057447666},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1654057447666},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1654057447666},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1654057447666},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1654057447666},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1654057447666},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1654057447666},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1654057447666},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1654057447666},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1654057447666},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1654057447666},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1654057447666},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1654057447666},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1654057447666},{"_id":"source/_posts/5.安装CuDNN.md","hash":"c40eeac7c38a5220669eb12d21878b3b25d97c5d","modified":1654066095927},{"_id":"source/_posts/# GIT基本操作.md","hash":"866982b15083cd1164ab5276478d7b4bb4f10fb5","modified":1654065800675},{"_id":"public/2022/06/01/5.安装CuDNN/index.html","hash":"e2ae851c972046581c9e48a77873608f4bfea75c","modified":1654077935482},{"_id":"public/2022/06/01/# GIT基本操作/index.html","hash":"32b191d319efa4c2a6c0cfa211dbe42f24d4c747","modified":1654077935482},{"_id":"source/CNAME","hash":"1eb2b2d7ff8a4505d9911f33114a83abf51377fd","modified":1654077840270},{"_id":"public/CNAME","hash":"1eb2b2d7ff8a4505d9911f33114a83abf51377fd","modified":1654077935482}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"由于比赛需要，我和小伙伴给好几台机器都配置了cuda环境。安装cuda的时候虽然参考了很多教程，但也避免不了踩坑，因此总结了一个比较完善的方法。\n\n1.更换linux内核\n\nUbuntu16.04一般都是4.15的内核，而cuda9.0不支持此版本的内核，因此需要更换为4.4版本。\n\n(1)查看已安装的内核版本\n\n```bash\ndpkg -l | grep linux-image\n```\n(2)查看当前使用的内核，若为4.15，则需更换为4.4：\n\n```bash\nuname -r\n```\n(3)查看可以更换的内核\n\n```bash\nsudo apt-cache search linux-image\n```\n(4)安装新内核\n\n```bash\nsudo apt-get install linux-image-4.4.0-77-generic linux-image-extra-4.4.0-77-generic\n```\n(5)更新grub引导\n\n```bash\nsudo update-grub\n```\n(6)重启，在grub引导界面进入Ubuntu高级选项，选择4.4内核\n\n(7)安装对应内核版本的headers文件（一定要先装好4.4版本的headers文件再删除多余内核，否则会出现网卡配置等问题）\n\n```bash\nsudo apt-get install linux-headers-$(uname -r)\n```\n(8)删除多余内核\n\n- linux-headers-版本号：内核头文件\n\n- linux-image-版本号：内核映像文件\n\n- linux-image-extra-版本号：内核扩展文件\n\n```bash\nsudo apt-get purge linux-*4.15*\n```\n(9)更新grub引导\n\n```bash\nsudo update-grub\n```\n2.检查CUDA安装环境\n\n(1)GPU是否支持CUDA\n\n```bash\nlspci | grep -i nvidia\n```\n然后去CUDA的官网查看自己的GPU版本是否在CUDA的支持列表中。\n(2)linux版本是否支持CUDA\n\n```bash\nuname -m &&cat /etc/*release\n```\n(3)安装缺少的依赖库\n\n```bash\nsudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev\n```\n3.禁用nouveau驱动\n\n(1)打开/etc/modprobe.d下的blacklist.conf\n\n```bash\nsudo gedit /etc/modprobe.d/blacklist.conf\n```\n(2)在blacklist.conf的末尾添加：\n\n```bash\nblacklist nouveau\noptions nouveau modeset=0\n```\n(3)执行生效并重启(注：这条命令可能不会生效。如果终端运行了一会儿说明已经生效，重启电脑；如果没有生效可以多运行几次。如果还是不行可以先去掉-u执行再加上)\n\n```bash\nsudo update-initramfs -u\n```\n(4)查看是否已禁用\n\n```bash\nlsmod | grep nouveau\n```\n若无内容输出，则表示禁用成功。\n\n4.安装NVIDIA驱动以及cuda\n\n在安装cuda时会自动安装NVIDIA驱动，但是可能会安装失败所以在这里先安装NVIDIA驱动。下载对应gpu版本的NVIDIA驱动、runfile版本的cuda9.0，分别修改文件名为NVIDIA.run、cuda.run，并放在home目录下，方便输入命令。\n\n(1)安装NVIDIA驱动。重启到登录界面时按Ctrl+Alt+F1进入文字用户界面输入自己的用户名和密码，然后运行以下命令并输入密码\n\n```bash\nsudo su\n```\n关闭图形化界面\n\n```bash\nsudo service lightdm stop\n```\n运行\n\n```bash\ninit 3\n```\n```bash\nsh NVIDIA.run\n```\n安装完成后输入以下命令，可以查看显卡驱动的详细信息\n\n```bash\nnvidia-smi\n```\n(2)输入reboot重启，到登录界面会发现分辨率恢复正常（也有特殊情况）。按Ctrl+Alt+F1进入文字用户界面，运行\n\n```bash\nsudo service lightdm stop\n```\n(3)安装cuda9.0\n\n```bash\nsudo sh cuda.run\n```\n等待一段时间到协议界面，按Ctrl+c跳过协议，因为已经先安装好了NVIDIA驱动，NVIDIA Accelerate Graphics Driver选no；其他yes或default。\n\n(4)重启图形化界面\n\n```bash\nsudo service lightdm start\n```\n按Ctrl+Alt+F7返回图形化登录界面并登录。\n\n(5) 检查Device Node Verification\n\n```bash\nls /dev/nvidia*\n```\n\na.显示\n\n/dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidia-modeset\n\n或类似信息（/dev/nvidia*），则安装成功。\n\nb.显示\n\nls: cannot access/dev/nvidia*: No such file or directory\n\n或者 /dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl ，a中的一个或两个，但没有/dev/nvidia-modeset\n\n则需要添加一个启动脚本\n\n```bash\nsudo vi /etc/rc.local\n```\n\n首先把文件的第一行 #!/bin/sh -e 中的 -e 去掉（这步很重要，否则它不会加载文本的内容）<br>\n然后把下列除了 #!/bin/bash 的内容复制到 exit 0 之前，保存退出。\n\n```bash\n#!/bin/bash\n/sbin/modprobe nvidia\n \nif [ \"$?\" -eq 0 ]; then\n# Count the number of NVIDIA controllers found.\nNVDEVS=`lspci | grep -i NVIDIA`\nN3D=`echo \"$NVDEVS\" | grep \"3D controller\" | wc -l`\nNVGA=`echo \"$NVDEVS\" | grep \"VGA compatible controller\" | wc -l`\n \nN=`expr $N3D + $NVGA - 1`\nfor i in `seq 0 $N`; do\nmknod -m 666 /dev/nvidia$i c 195 $i\ndone\n \nmknod -m 666 /dev/nvidiactl c 195 255\n \nelse\nexit 1\nfi\n \n/sbin/modprobe nvidia-uvm\n \nif [ \"$?\" -eq 0 ]; then\n# Find out the major device number used by the nvidia-uvm driver\nD=`grep nvidia-uvm /proc/devices | awk '{print $1}'`\n \nmknod -m 666 /dev/nvidia-uvm c $D 0\nelse\nexit 1\nfi\n```\n\n下次重启时，应该能直接看到/dev目录下的三个nvidia的文件\n\n(6) 设置环境变量\n\n```bash\nsudo gedit /etc/profile\n```\n\n在文件末尾添加以下两行：\n\n```bash\nexport PATH=/usr/local/cuda-9.0/bin${PATH:+:${PATH}}\nexport LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n```\n\n保存文件并重启，因为profile在重启电脑之后才永久生效\n\n(7) 检查上述的环境变量是否设置成功。\n\na.验证驱动版本\n\n```bash\ncat /proc/driver/nvidia/version\n```\n\nb.验证CUDA Toolkit，会输出CUDA的版本信息\n\n\n```bash\nnvcc -V\n```\n\n(8)尝试编译cuda提供samples\n\na.打开终端输入：\n\n```bash\ncd /home/xxx/NVIDIA_CUDA-9.0_Samples\n```\n\n其中xxx是自己的用户名\n\n然后输入：\n\n```bash\nmake\n```\n\n系统就会自动进入到编译过程，整个过程大概需要十几到二十分钟，请耐心等待。如果出现错误的话，系统会立即报错停止。第一次运行时可能会报错，提示的错误信息可能会是系统中没有gcc，解决办法就是通过命令重新安装gcc，在终端输入：\n\n\n```bash\nsudo apt-get install gcc\n```\n\n 安装完gcc后， 再make就正常了。如果编译成功，最后会显示Finished building CUDA samples。\n\nb.运行编译生成的二进制文件\n编译后的二进制文件默认存放在NVIDIA_CUDA-9.0_Samples/bin中，接着输入：\n\n```bash\ncd /home/xxx/NVIDIA_CUDA-9.0_Samples/bin/x86_64/linux/release\n```\n```bash\n./deviceQuery\n```\n最后显示Result = PASS代表成功，若失败 Result = FAIL。\n\nc.最后再检查一下系统和CUDA-Capable device的连接情况\n\n```bash\n./bandwidthTest\n```\n最后显示Result = PASS代表成功，若失败 Result = FAIL。\n\n<h3><a name=\"t4\"></a>5.安装CuDNN</h3>\n\n在文件所在目录解压，xx是自己的cudnn版本号\n\n```bash\nsudo tar -xzvf cudnn-xx.tgz\n```\n执行\n\n```bash\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include\n```\n```bash\nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\n```\n添加权限\n\n```bash\nsudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*","source":"_posts/5.安装CuDNN.md","raw":"由于比赛需要，我和小伙伴给好几台机器都配置了cuda环境。安装cuda的时候虽然参考了很多教程，但也避免不了踩坑，因此总结了一个比较完善的方法。\n\n1.更换linux内核\n\nUbuntu16.04一般都是4.15的内核，而cuda9.0不支持此版本的内核，因此需要更换为4.4版本。\n\n(1)查看已安装的内核版本\n\n```bash\ndpkg -l | grep linux-image\n```\n(2)查看当前使用的内核，若为4.15，则需更换为4.4：\n\n```bash\nuname -r\n```\n(3)查看可以更换的内核\n\n```bash\nsudo apt-cache search linux-image\n```\n(4)安装新内核\n\n```bash\nsudo apt-get install linux-image-4.4.0-77-generic linux-image-extra-4.4.0-77-generic\n```\n(5)更新grub引导\n\n```bash\nsudo update-grub\n```\n(6)重启，在grub引导界面进入Ubuntu高级选项，选择4.4内核\n\n(7)安装对应内核版本的headers文件（一定要先装好4.4版本的headers文件再删除多余内核，否则会出现网卡配置等问题）\n\n```bash\nsudo apt-get install linux-headers-$(uname -r)\n```\n(8)删除多余内核\n\n- linux-headers-版本号：内核头文件\n\n- linux-image-版本号：内核映像文件\n\n- linux-image-extra-版本号：内核扩展文件\n\n```bash\nsudo apt-get purge linux-*4.15*\n```\n(9)更新grub引导\n\n```bash\nsudo update-grub\n```\n2.检查CUDA安装环境\n\n(1)GPU是否支持CUDA\n\n```bash\nlspci | grep -i nvidia\n```\n然后去CUDA的官网查看自己的GPU版本是否在CUDA的支持列表中。\n(2)linux版本是否支持CUDA\n\n```bash\nuname -m &&cat /etc/*release\n```\n(3)安装缺少的依赖库\n\n```bash\nsudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev\n```\n3.禁用nouveau驱动\n\n(1)打开/etc/modprobe.d下的blacklist.conf\n\n```bash\nsudo gedit /etc/modprobe.d/blacklist.conf\n```\n(2)在blacklist.conf的末尾添加：\n\n```bash\nblacklist nouveau\noptions nouveau modeset=0\n```\n(3)执行生效并重启(注：这条命令可能不会生效。如果终端运行了一会儿说明已经生效，重启电脑；如果没有生效可以多运行几次。如果还是不行可以先去掉-u执行再加上)\n\n```bash\nsudo update-initramfs -u\n```\n(4)查看是否已禁用\n\n```bash\nlsmod | grep nouveau\n```\n若无内容输出，则表示禁用成功。\n\n4.安装NVIDIA驱动以及cuda\n\n在安装cuda时会自动安装NVIDIA驱动，但是可能会安装失败所以在这里先安装NVIDIA驱动。下载对应gpu版本的NVIDIA驱动、runfile版本的cuda9.0，分别修改文件名为NVIDIA.run、cuda.run，并放在home目录下，方便输入命令。\n\n(1)安装NVIDIA驱动。重启到登录界面时按Ctrl+Alt+F1进入文字用户界面输入自己的用户名和密码，然后运行以下命令并输入密码\n\n```bash\nsudo su\n```\n关闭图形化界面\n\n```bash\nsudo service lightdm stop\n```\n运行\n\n```bash\ninit 3\n```\n```bash\nsh NVIDIA.run\n```\n安装完成后输入以下命令，可以查看显卡驱动的详细信息\n\n```bash\nnvidia-smi\n```\n(2)输入reboot重启，到登录界面会发现分辨率恢复正常（也有特殊情况）。按Ctrl+Alt+F1进入文字用户界面，运行\n\n```bash\nsudo service lightdm stop\n```\n(3)安装cuda9.0\n\n```bash\nsudo sh cuda.run\n```\n等待一段时间到协议界面，按Ctrl+c跳过协议，因为已经先安装好了NVIDIA驱动，NVIDIA Accelerate Graphics Driver选no；其他yes或default。\n\n(4)重启图形化界面\n\n```bash\nsudo service lightdm start\n```\n按Ctrl+Alt+F7返回图形化登录界面并登录。\n\n(5) 检查Device Node Verification\n\n```bash\nls /dev/nvidia*\n```\n\na.显示\n\n/dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidia-modeset\n\n或类似信息（/dev/nvidia*），则安装成功。\n\nb.显示\n\nls: cannot access/dev/nvidia*: No such file or directory\n\n或者 /dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl ，a中的一个或两个，但没有/dev/nvidia-modeset\n\n则需要添加一个启动脚本\n\n```bash\nsudo vi /etc/rc.local\n```\n\n首先把文件的第一行 #!/bin/sh -e 中的 -e 去掉（这步很重要，否则它不会加载文本的内容）<br>\n然后把下列除了 #!/bin/bash 的内容复制到 exit 0 之前，保存退出。\n\n```bash\n#!/bin/bash\n/sbin/modprobe nvidia\n \nif [ \"$?\" -eq 0 ]; then\n# Count the number of NVIDIA controllers found.\nNVDEVS=`lspci | grep -i NVIDIA`\nN3D=`echo \"$NVDEVS\" | grep \"3D controller\" | wc -l`\nNVGA=`echo \"$NVDEVS\" | grep \"VGA compatible controller\" | wc -l`\n \nN=`expr $N3D + $NVGA - 1`\nfor i in `seq 0 $N`; do\nmknod -m 666 /dev/nvidia$i c 195 $i\ndone\n \nmknod -m 666 /dev/nvidiactl c 195 255\n \nelse\nexit 1\nfi\n \n/sbin/modprobe nvidia-uvm\n \nif [ \"$?\" -eq 0 ]; then\n# Find out the major device number used by the nvidia-uvm driver\nD=`grep nvidia-uvm /proc/devices | awk '{print $1}'`\n \nmknod -m 666 /dev/nvidia-uvm c $D 0\nelse\nexit 1\nfi\n```\n\n下次重启时，应该能直接看到/dev目录下的三个nvidia的文件\n\n(6) 设置环境变量\n\n```bash\nsudo gedit /etc/profile\n```\n\n在文件末尾添加以下两行：\n\n```bash\nexport PATH=/usr/local/cuda-9.0/bin${PATH:+:${PATH}}\nexport LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n```\n\n保存文件并重启，因为profile在重启电脑之后才永久生效\n\n(7) 检查上述的环境变量是否设置成功。\n\na.验证驱动版本\n\n```bash\ncat /proc/driver/nvidia/version\n```\n\nb.验证CUDA Toolkit，会输出CUDA的版本信息\n\n\n```bash\nnvcc -V\n```\n\n(8)尝试编译cuda提供samples\n\na.打开终端输入：\n\n```bash\ncd /home/xxx/NVIDIA_CUDA-9.0_Samples\n```\n\n其中xxx是自己的用户名\n\n然后输入：\n\n```bash\nmake\n```\n\n系统就会自动进入到编译过程，整个过程大概需要十几到二十分钟，请耐心等待。如果出现错误的话，系统会立即报错停止。第一次运行时可能会报错，提示的错误信息可能会是系统中没有gcc，解决办法就是通过命令重新安装gcc，在终端输入：\n\n\n```bash\nsudo apt-get install gcc\n```\n\n 安装完gcc后， 再make就正常了。如果编译成功，最后会显示Finished building CUDA samples。\n\nb.运行编译生成的二进制文件\n编译后的二进制文件默认存放在NVIDIA_CUDA-9.0_Samples/bin中，接着输入：\n\n```bash\ncd /home/xxx/NVIDIA_CUDA-9.0_Samples/bin/x86_64/linux/release\n```\n```bash\n./deviceQuery\n```\n最后显示Result = PASS代表成功，若失败 Result = FAIL。\n\nc.最后再检查一下系统和CUDA-Capable device的连接情况\n\n```bash\n./bandwidthTest\n```\n最后显示Result = PASS代表成功，若失败 Result = FAIL。\n\n<h3><a name=\"t4\"></a>5.安装CuDNN</h3>\n\n在文件所在目录解压，xx是自己的cudnn版本号\n\n```bash\nsudo tar -xzvf cudnn-xx.tgz\n```\n执行\n\n```bash\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include\n```\n```bash\nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\n```\n添加权限\n\n```bash\nsudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*","slug":"5.安装CuDNN","published":1,"date":"2022-06-01T06:48:15.850Z","updated":"2022-06-01T06:48:15.927Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3vevq5t0000ykui15306sek","content":"<p>由于比赛需要，我和小伙伴给好几台机器都配置了cuda环境。安装cuda的时候虽然参考了很多教程，但也避免不了踩坑，因此总结了一个比较完善的方法。</p>\n<p>1.更换linux内核</p>\n<p>Ubuntu16.04一般都是4.15的内核，而cuda9.0不支持此版本的内核，因此需要更换为4.4版本。</p>\n<p>(1)查看已安装的内核版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -l | grep linux-image</span><br></pre></td></tr></table></figure>\n<p>(2)查看当前使用的内核，若为4.15，则需更换为4.4：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> -r</span><br></pre></td></tr></table></figure>\n<p>(3)查看可以更换的内核</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-cache search linux-image</span><br></pre></td></tr></table></figure>\n<p>(4)安装新内核</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-image-4.4.0-77-generic linux-image-extra-4.4.0-77-generic</span><br></pre></td></tr></table></figure>\n<p>(5)更新grub引导</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n<p>(6)重启，在grub引导界面进入Ubuntu高级选项，选择4.4内核</p>\n<p>(7)安装对应内核版本的headers文件（一定要先装好4.4版本的headers文件再删除多余内核，否则会出现网卡配置等问题）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-headers-$(<span class=\"built_in\">uname</span> -r)</span><br></pre></td></tr></table></figure>\n<p>(8)删除多余内核</p>\n<ul>\n<li><p>linux-headers-版本号：内核头文件</p>\n</li>\n<li><p>linux-image-版本号：内核映像文件</p>\n</li>\n<li><p>linux-image-extra-版本号：内核扩展文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get purge linux-*4.15*</span><br></pre></td></tr></table></figure>\n<p>(9)更新grub引导</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n<p>2.检查CUDA安装环境</p>\n<p>(1)GPU是否支持CUDA</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>\n<p>然后去CUDA的官网查看自己的GPU版本是否在CUDA的支持列表中。<br>(2)linux版本是否支持CUDA</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> -m &amp;&amp;<span class=\"built_in\">cat</span> /etc/*release</span><br></pre></td></tr></table></figure>\n<p>(3)安装缺少的依赖库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev</span><br></pre></td></tr></table></figure>\n<p>3.禁用nouveau驱动</p>\n<p>(1)打开/etc/modprobe.d下的blacklist.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure>\n<p>(2)在blacklist.conf的末尾添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist nouveau</span><br><span class=\"line\">options nouveau modeset=0</span><br></pre></td></tr></table></figure>\n<p>(3)执行生效并重启(注：这条命令可能不会生效。如果终端运行了一会儿说明已经生效，重启电脑；如果没有生效可以多运行几次。如果还是不行可以先去掉-u执行再加上)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>\n<p>(4)查看是否已禁用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>\n<p>若无内容输出，则表示禁用成功。</p>\n<p>4.安装NVIDIA驱动以及cuda</p>\n<p>在安装cuda时会自动安装NVIDIA驱动，但是可能会安装失败所以在这里先安装NVIDIA驱动。下载对应gpu版本的NVIDIA驱动、runfile版本的cuda9.0，分别修改文件名为NVIDIA.run、cuda.run，并放在home目录下，方便输入命令。</p>\n<p>(1)安装NVIDIA驱动。重启到登录界面时按Ctrl+Alt+F1进入文字用户界面输入自己的用户名和密码，然后运行以下命令并输入密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br></pre></td></tr></table></figure>\n<p>关闭图形化界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init 3</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh NVIDIA.run</span><br></pre></td></tr></table></figure>\n<p>安装完成后输入以下命令，可以查看显卡驱动的详细信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n<p>(2)输入reboot重启，到登录界面会发现分辨率恢复正常（也有特殊情况）。按Ctrl+Alt+F1进入文字用户界面，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n<p>(3)安装cuda9.0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh cuda.run</span><br></pre></td></tr></table></figure>\n<p>等待一段时间到协议界面，按Ctrl+c跳过协议，因为已经先安装好了NVIDIA驱动，NVIDIA Accelerate Graphics Driver选no；其他yes或default。</p>\n<p>(4)重启图形化界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm start</span><br></pre></td></tr></table></figure>\n<p>按Ctrl+Alt+F7返回图形化登录界面并登录。</p>\n<p>(5) 检查Device Node Verification</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> /dev/nvidia*</span><br></pre></td></tr></table></figure>\n\n<p>a.显示</p>\n<p>/dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidia-modeset</p>\n<p>或类似信息（/dev/nvidia*），则安装成功。</p>\n<p>b.显示</p>\n<p>ls: cannot access/dev/nvidia*: No such file or directory</p>\n<p>或者 /dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl ，a中的一个或两个，但没有/dev/nvidia-modeset</p>\n<p>则需要添加一个启动脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>首先把文件的第一行 #!/bin/sh -e 中的 -e 去掉（这步很重要，否则它不会加载文本的内容）<br><br>然后把下列除了 #!/bin/bash 的内容复制到 exit 0 之前，保存退出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">/sbin/modprobe nvidia</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;$?&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\"># Count the number of NVIDIA controllers found.</span></span><br><span class=\"line\">NVDEVS=`lspci | grep -i NVIDIA`</span><br><span class=\"line\">N3D=`<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$NVDEVS</span>&quot;</span> | grep <span class=\"string\">&quot;3D controller&quot;</span> | <span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\">NVGA=`<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$NVDEVS</span>&quot;</span> | grep <span class=\"string\">&quot;VGA compatible controller&quot;</span> | <span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\"> </span><br><span class=\"line\">N=`<span class=\"built_in\">expr</span> <span class=\"variable\">$N3D</span> + <span class=\"variable\">$NVGA</span> - 1`</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `<span class=\"built_in\">seq</span> 0 <span class=\"variable\">$N</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidia<span class=\"variable\">$i</span> c 195 <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidiactl c 195 255</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"> </span><br><span class=\"line\">/sbin/modprobe nvidia-uvm</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;$?&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\"># Find out the major device number used by the nvidia-uvm driver</span></span><br><span class=\"line\">D=`grep nvidia-uvm /proc/devices | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidia-uvm c <span class=\"variable\">$D</span> 0</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p>下次重启时，应该能直接看到/dev目录下的三个nvidia的文件</p>\n<p>(6) 设置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>在文件末尾添加以下两行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/local/cuda-9.0/bin<span class=\"variable\">$&#123;PATH:+:<span class=\"variable\">$&#123;PATH&#125;</span>&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64<span class=\"variable\">$&#123;LD_LIBRARY_PATH:+:<span class=\"variable\">$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>保存文件并重启，因为profile在重启电脑之后才永久生效</p>\n<p>(7) 检查上述的环境变量是否设置成功。</p>\n<p>a.验证驱动版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure>\n\n<p>b.验证CUDA Toolkit，会输出CUDA的版本信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc -V</span><br></pre></td></tr></table></figure>\n\n<p>(8)尝试编译cuda提供samples</p>\n<p>a.打开终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/xxx/NVIDIA_CUDA-9.0_Samples</span><br></pre></td></tr></table></figure>\n\n<p>其中xxx是自己的用户名</p>\n<p>然后输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>系统就会自动进入到编译过程，整个过程大概需要十几到二十分钟，请耐心等待。如果出现错误的话，系统会立即报错停止。第一次运行时可能会报错，提示的错误信息可能会是系统中没有gcc，解决办法就是通过命令重新安装gcc，在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gcc</span><br></pre></td></tr></table></figure>\n\n<p> 安装完gcc后， 再make就正常了。如果编译成功，最后会显示Finished building CUDA samples。</p>\n<p>b.运行编译生成的二进制文件<br>编译后的二进制文件默认存放在NVIDIA_CUDA-9.0_Samples/bin中，接着输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/xxx/NVIDIA_CUDA-9.0_Samples/bin/x86_64/linux/release</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./deviceQuery</span><br></pre></td></tr></table></figure>\n<p>最后显示Result = PASS代表成功，若失败 Result = FAIL。</p>\n<p>c.最后再检查一下系统和CUDA-Capable device的连接情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bandwidthTest</span><br></pre></td></tr></table></figure>\n<p>最后显示Result = PASS代表成功，若失败 Result = FAIL。</p>\n<h3><a name=\"t4\"></a>5.安装CuDNN</h3>\n\n<p>在文件所在目录解压，xx是自己的cudnn版本号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -xzvf cudnn-xx.tgz</span><br></pre></td></tr></table></figure>\n<p>执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> cuda/include/cudnn.h /usr/local/cuda/include</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br></pre></td></tr></table></figure>\n<p>添加权限</p>\n<p>```bash<br>sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</p>\n","site":{"data":{}},"excerpt":"","more":"<p>由于比赛需要，我和小伙伴给好几台机器都配置了cuda环境。安装cuda的时候虽然参考了很多教程，但也避免不了踩坑，因此总结了一个比较完善的方法。</p>\n<p>1.更换linux内核</p>\n<p>Ubuntu16.04一般都是4.15的内核，而cuda9.0不支持此版本的内核，因此需要更换为4.4版本。</p>\n<p>(1)查看已安装的内核版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -l | grep linux-image</span><br></pre></td></tr></table></figure>\n<p>(2)查看当前使用的内核，若为4.15，则需更换为4.4：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> -r</span><br></pre></td></tr></table></figure>\n<p>(3)查看可以更换的内核</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-cache search linux-image</span><br></pre></td></tr></table></figure>\n<p>(4)安装新内核</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-image-4.4.0-77-generic linux-image-extra-4.4.0-77-generic</span><br></pre></td></tr></table></figure>\n<p>(5)更新grub引导</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n<p>(6)重启，在grub引导界面进入Ubuntu高级选项，选择4.4内核</p>\n<p>(7)安装对应内核版本的headers文件（一定要先装好4.4版本的headers文件再删除多余内核，否则会出现网卡配置等问题）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-headers-$(<span class=\"built_in\">uname</span> -r)</span><br></pre></td></tr></table></figure>\n<p>(8)删除多余内核</p>\n<ul>\n<li><p>linux-headers-版本号：内核头文件</p>\n</li>\n<li><p>linux-image-版本号：内核映像文件</p>\n</li>\n<li><p>linux-image-extra-版本号：内核扩展文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get purge linux-*4.15*</span><br></pre></td></tr></table></figure>\n<p>(9)更新grub引导</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n<p>2.检查CUDA安装环境</p>\n<p>(1)GPU是否支持CUDA</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>\n<p>然后去CUDA的官网查看自己的GPU版本是否在CUDA的支持列表中。<br>(2)linux版本是否支持CUDA</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> -m &amp;&amp;<span class=\"built_in\">cat</span> /etc/*release</span><br></pre></td></tr></table></figure>\n<p>(3)安装缺少的依赖库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev</span><br></pre></td></tr></table></figure>\n<p>3.禁用nouveau驱动</p>\n<p>(1)打开/etc/modprobe.d下的blacklist.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure>\n<p>(2)在blacklist.conf的末尾添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist nouveau</span><br><span class=\"line\">options nouveau modeset=0</span><br></pre></td></tr></table></figure>\n<p>(3)执行生效并重启(注：这条命令可能不会生效。如果终端运行了一会儿说明已经生效，重启电脑；如果没有生效可以多运行几次。如果还是不行可以先去掉-u执行再加上)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>\n<p>(4)查看是否已禁用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>\n<p>若无内容输出，则表示禁用成功。</p>\n<p>4.安装NVIDIA驱动以及cuda</p>\n<p>在安装cuda时会自动安装NVIDIA驱动，但是可能会安装失败所以在这里先安装NVIDIA驱动。下载对应gpu版本的NVIDIA驱动、runfile版本的cuda9.0，分别修改文件名为NVIDIA.run、cuda.run，并放在home目录下，方便输入命令。</p>\n<p>(1)安装NVIDIA驱动。重启到登录界面时按Ctrl+Alt+F1进入文字用户界面输入自己的用户名和密码，然后运行以下命令并输入密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br></pre></td></tr></table></figure>\n<p>关闭图形化界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init 3</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh NVIDIA.run</span><br></pre></td></tr></table></figure>\n<p>安装完成后输入以下命令，可以查看显卡驱动的详细信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n<p>(2)输入reboot重启，到登录界面会发现分辨率恢复正常（也有特殊情况）。按Ctrl+Alt+F1进入文字用户界面，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n<p>(3)安装cuda9.0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh cuda.run</span><br></pre></td></tr></table></figure>\n<p>等待一段时间到协议界面，按Ctrl+c跳过协议，因为已经先安装好了NVIDIA驱动，NVIDIA Accelerate Graphics Driver选no；其他yes或default。</p>\n<p>(4)重启图形化界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm start</span><br></pre></td></tr></table></figure>\n<p>按Ctrl+Alt+F7返回图形化登录界面并登录。</p>\n<p>(5) 检查Device Node Verification</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> /dev/nvidia*</span><br></pre></td></tr></table></figure>\n\n<p>a.显示</p>\n<p>/dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidia-modeset</p>\n<p>或类似信息（/dev/nvidia*），则安装成功。</p>\n<p>b.显示</p>\n<p>ls: cannot access/dev/nvidia*: No such file or directory</p>\n<p>或者 /dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl ，a中的一个或两个，但没有/dev/nvidia-modeset</p>\n<p>则需要添加一个启动脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>首先把文件的第一行 #!/bin/sh -e 中的 -e 去掉（这步很重要，否则它不会加载文本的内容）<br><br>然后把下列除了 #!/bin/bash 的内容复制到 exit 0 之前，保存退出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">/sbin/modprobe nvidia</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;$?&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\"># Count the number of NVIDIA controllers found.</span></span><br><span class=\"line\">NVDEVS=`lspci | grep -i NVIDIA`</span><br><span class=\"line\">N3D=`<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$NVDEVS</span>&quot;</span> | grep <span class=\"string\">&quot;3D controller&quot;</span> | <span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\">NVGA=`<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$NVDEVS</span>&quot;</span> | grep <span class=\"string\">&quot;VGA compatible controller&quot;</span> | <span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\"> </span><br><span class=\"line\">N=`<span class=\"built_in\">expr</span> <span class=\"variable\">$N3D</span> + <span class=\"variable\">$NVGA</span> - 1`</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `<span class=\"built_in\">seq</span> 0 <span class=\"variable\">$N</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidia<span class=\"variable\">$i</span> c 195 <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidiactl c 195 255</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"> </span><br><span class=\"line\">/sbin/modprobe nvidia-uvm</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;$?&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\"># Find out the major device number used by the nvidia-uvm driver</span></span><br><span class=\"line\">D=`grep nvidia-uvm /proc/devices | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidia-uvm c <span class=\"variable\">$D</span> 0</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p>下次重启时，应该能直接看到/dev目录下的三个nvidia的文件</p>\n<p>(6) 设置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>在文件末尾添加以下两行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/local/cuda-9.0/bin<span class=\"variable\">$&#123;PATH:+:<span class=\"variable\">$&#123;PATH&#125;</span>&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64<span class=\"variable\">$&#123;LD_LIBRARY_PATH:+:<span class=\"variable\">$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>保存文件并重启，因为profile在重启电脑之后才永久生效</p>\n<p>(7) 检查上述的环境变量是否设置成功。</p>\n<p>a.验证驱动版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure>\n\n<p>b.验证CUDA Toolkit，会输出CUDA的版本信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc -V</span><br></pre></td></tr></table></figure>\n\n<p>(8)尝试编译cuda提供samples</p>\n<p>a.打开终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/xxx/NVIDIA_CUDA-9.0_Samples</span><br></pre></td></tr></table></figure>\n\n<p>其中xxx是自己的用户名</p>\n<p>然后输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>系统就会自动进入到编译过程，整个过程大概需要十几到二十分钟，请耐心等待。如果出现错误的话，系统会立即报错停止。第一次运行时可能会报错，提示的错误信息可能会是系统中没有gcc，解决办法就是通过命令重新安装gcc，在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gcc</span><br></pre></td></tr></table></figure>\n\n<p> 安装完gcc后， 再make就正常了。如果编译成功，最后会显示Finished building CUDA samples。</p>\n<p>b.运行编译生成的二进制文件<br>编译后的二进制文件默认存放在NVIDIA_CUDA-9.0_Samples/bin中，接着输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/xxx/NVIDIA_CUDA-9.0_Samples/bin/x86_64/linux/release</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./deviceQuery</span><br></pre></td></tr></table></figure>\n<p>最后显示Result = PASS代表成功，若失败 Result = FAIL。</p>\n<p>c.最后再检查一下系统和CUDA-Capable device的连接情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bandwidthTest</span><br></pre></td></tr></table></figure>\n<p>最后显示Result = PASS代表成功，若失败 Result = FAIL。</p>\n<h3><a name=\"t4\"></a>5.安装CuDNN</h3>\n\n<p>在文件所在目录解压，xx是自己的cudnn版本号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -xzvf cudnn-xx.tgz</span><br></pre></td></tr></table></figure>\n<p>执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> cuda/include/cudnn.h /usr/local/cuda/include</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br></pre></td></tr></table></figure>\n<p>添加权限</p>\n<p>```bash<br>sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</p>\n"},{"_content":"# GIT基本操作\n下面是一些日常操作\n\n## 1. 建立本地仓库:\n\n```bash\ngit init [project-name]  #创建本地仓库\n```\n\n\n```bash\ngit remote add origin git@github.com:UserName/yourProjectName.git   \n#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址\n\ngit remote add origin git@github.com:UserName/yourProjectName.git   \n#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址\n\ngit clone https://github.com/zhoulujun/yourProjectName.git\n#下载github仓库\n```\n\n## 2.提交本地修改到远程仓库中：\n``` bash\ngit add # 将改动添加到本地仓库中  \n\ngit add [file1] [file2] ...  ||  git add [dir] # 添加指定文件||目录到暂存区\n\ngit add -A ||  git add . # 添加当前目录的所有文件到暂存区\n\ngit add -p # 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交\n```\n\n``` bash\ngit rm xxx      # 从本地仓库中删除指定文件\ngit rm -r xxx   # 从本地仓库中删除指定文件夹\n\ngit rm --cached [file]\n```\n``` bash\ngit mv [file-original] [file-renamed]  改名文件，并且将这个改名放入暂存区\n```\n``` bash\ngit commit -m \"注释\"    -- 把本机缓存中的内容提交到本机的 HEAD 里面\n\ngit commit -a 提交工作区自上次commit之后的变化，直接到仓库区\n\ngit commit -v 提交时显示所有diff信息\n\ngit commit --amend -m [message] 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\ngit commit --amend [file1] [file2] ... 重做上一次commit，并包括指定文件的新变化\n```\n``` bash\ngit push origin master  -- 把本地的 commit(提交) push 到远程服务器上， origin 也就是之前 git remote add origin 那个命令里面的 origin，origin 替代了服务器仓库地址：git@github.com:zhoulujun/yourProjectName.git \n\ngit push remoteBranchName tagName提交指定tag\n\ngit push remoteBranchName --tags 提交所有tag\n```\n\n## 3. git转态查看\n``` bash\ngit status 查看状态\n```\n``` bash\ngit branch 查看本地所有分支\n\ngit branch -r查看远程所有分支\n\ngit branch -a查看本地和远程所有分支\n```\ngit tag  列出所有tag\n\ngit show tagName 查看tag信息\n\ngit log --stat 显示commit历史，以及每次commit发生变更的文件\n\n分支操作\ngit checkout branchName 切换到指定分支，并更新工作区\n\ngit merge branchName 合并指定分支到当前分支\n\ngit branch newBranchName 新建一个分支，但依然停留在当前分支\n\ngit branch --track branch remote-branch 新建一个分支，与指定的远程分支建立追踪关系\n\ngit branch -D branchName //删除目标分支\n\ngit checkout -b branchName 新建并切换至新分支\n\ngit branch -d -r branchName 删除远程分支，其中\n\ngit branch -m oldbranchname newbranchname  重命名分支 使用-M则表示强制重命名\n\n重命名远程分支\n\ngit branch -m old_name new_name 重命名分支\n\ngit checkout -b new_branch_name from_branch_name 本地建立 branch 並立即 checkout 切換過去\n\ngit push origin –delete old_name\n\n也可以如此操作\n\ngit branch -m old_branch new_branch # Rename branch locally\n\ngit push origin :old_branch # Delete the old branch\n\ngit push --set-upstream origin new_branch 或者git push -u origin new_branch  # Push the new branch, set local branch to track the new remote\n\ngit分支与主干合并操作\n在主干上合并分支||主干合并分支\ngit merge branch --squash //提交合并后的代码\n\ngit commit -m  ‘合并备注’\n\ngit push //将代码推送到远程仓库\n\n分支同步主干代码||在分支上合并主干\ngit merge master --squash //提交合并后的代码\n\ngit commit -m  ‘合并备注’ //将代码推送到远程仓库\n\ngit push //将代码推送到远程仓库\n\ngit强制覆盖本地代码\n与git远程仓库保持一致\n\ngit fetch --all\n\ngit reset --hard origin/master\n\ngit pull\n\ngit强制覆盖本地命令（单条执行）：\n\ngit fetch --all && git reset --hard origin/master && git pull\n\ngit修改远程仓库地址\n方法有三种：\n\n1.修改命令\n\ngit remote origin set-url [url]\n\n2.先删后加\n\ngit remote rm origin\n\ngit remote add origin [url]\n\n3.直接修改config文件\n\n.git文件夹，找到config，编辑，把就的项目地址替换成新的。\n\ngit 配置\ngit config --list        查看配置列表\n\ngit config --global user.name \"xxx\"   -- 配置用户名，上传本地 repository 到服务器上的时候，在 Github 上会显示这里配置的上传者信息\n\ngit config --global user.email \"xxx\"    -- 配置邮箱\n配置 sshkey ： 上传代码时使用这个 sshkey 来确认是否有上传权限\n    1. 创建本地 ssh ： ssh-keygen -t rsa -C \"Github 的注册邮箱\"\n    2. 在 Github 中添加这个 sshkey ： \n        复制  C:\\Documents and Settings\\Administrator\\.ssh\\id_rsa.pub 文件中的内容；\n        登录 Github --> Account Setting  --> SSH-KEY --> Add SSH-KEY --> 粘贴id_rsa.pub中的内容；\n    3. 验证： ssh -T git@github.com\n        出现 Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. 说明配置成功，可以连接上 Github\n\n使用 .gitignore 文件忽略指定的内容：\n\n    1. 在本地仓库根目录创建 .gitignore 文件。Win7 下不能直接创建，可以创建 \".gitignore.\" 文件，后面的标点自动被忽略；\n    2. 过滤文件和文件夹： [Tt]emp/ 过滤 Temp\\temp 文件夹； *.suo 过滤 .suo 文件；\n    3. 不过滤文件和文件夹： !*.c","source":"_posts/# GIT基本操作.md","raw":"# GIT基本操作\n下面是一些日常操作\n\n## 1. 建立本地仓库:\n\n```bash\ngit init [project-name]  #创建本地仓库\n```\n\n\n```bash\ngit remote add origin git@github.com:UserName/yourProjectName.git   \n#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址\n\ngit remote add origin git@github.com:UserName/yourProjectName.git   \n#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址\n\ngit clone https://github.com/zhoulujun/yourProjectName.git\n#下载github仓库\n```\n\n## 2.提交本地修改到远程仓库中：\n``` bash\ngit add # 将改动添加到本地仓库中  \n\ngit add [file1] [file2] ...  ||  git add [dir] # 添加指定文件||目录到暂存区\n\ngit add -A ||  git add . # 添加当前目录的所有文件到暂存区\n\ngit add -p # 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交\n```\n\n``` bash\ngit rm xxx      # 从本地仓库中删除指定文件\ngit rm -r xxx   # 从本地仓库中删除指定文件夹\n\ngit rm --cached [file]\n```\n``` bash\ngit mv [file-original] [file-renamed]  改名文件，并且将这个改名放入暂存区\n```\n``` bash\ngit commit -m \"注释\"    -- 把本机缓存中的内容提交到本机的 HEAD 里面\n\ngit commit -a 提交工作区自上次commit之后的变化，直接到仓库区\n\ngit commit -v 提交时显示所有diff信息\n\ngit commit --amend -m [message] 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\ngit commit --amend [file1] [file2] ... 重做上一次commit，并包括指定文件的新变化\n```\n``` bash\ngit push origin master  -- 把本地的 commit(提交) push 到远程服务器上， origin 也就是之前 git remote add origin 那个命令里面的 origin，origin 替代了服务器仓库地址：git@github.com:zhoulujun/yourProjectName.git \n\ngit push remoteBranchName tagName提交指定tag\n\ngit push remoteBranchName --tags 提交所有tag\n```\n\n## 3. git转态查看\n``` bash\ngit status 查看状态\n```\n``` bash\ngit branch 查看本地所有分支\n\ngit branch -r查看远程所有分支\n\ngit branch -a查看本地和远程所有分支\n```\ngit tag  列出所有tag\n\ngit show tagName 查看tag信息\n\ngit log --stat 显示commit历史，以及每次commit发生变更的文件\n\n分支操作\ngit checkout branchName 切换到指定分支，并更新工作区\n\ngit merge branchName 合并指定分支到当前分支\n\ngit branch newBranchName 新建一个分支，但依然停留在当前分支\n\ngit branch --track branch remote-branch 新建一个分支，与指定的远程分支建立追踪关系\n\ngit branch -D branchName //删除目标分支\n\ngit checkout -b branchName 新建并切换至新分支\n\ngit branch -d -r branchName 删除远程分支，其中\n\ngit branch -m oldbranchname newbranchname  重命名分支 使用-M则表示强制重命名\n\n重命名远程分支\n\ngit branch -m old_name new_name 重命名分支\n\ngit checkout -b new_branch_name from_branch_name 本地建立 branch 並立即 checkout 切換過去\n\ngit push origin –delete old_name\n\n也可以如此操作\n\ngit branch -m old_branch new_branch # Rename branch locally\n\ngit push origin :old_branch # Delete the old branch\n\ngit push --set-upstream origin new_branch 或者git push -u origin new_branch  # Push the new branch, set local branch to track the new remote\n\ngit分支与主干合并操作\n在主干上合并分支||主干合并分支\ngit merge branch --squash //提交合并后的代码\n\ngit commit -m  ‘合并备注’\n\ngit push //将代码推送到远程仓库\n\n分支同步主干代码||在分支上合并主干\ngit merge master --squash //提交合并后的代码\n\ngit commit -m  ‘合并备注’ //将代码推送到远程仓库\n\ngit push //将代码推送到远程仓库\n\ngit强制覆盖本地代码\n与git远程仓库保持一致\n\ngit fetch --all\n\ngit reset --hard origin/master\n\ngit pull\n\ngit强制覆盖本地命令（单条执行）：\n\ngit fetch --all && git reset --hard origin/master && git pull\n\ngit修改远程仓库地址\n方法有三种：\n\n1.修改命令\n\ngit remote origin set-url [url]\n\n2.先删后加\n\ngit remote rm origin\n\ngit remote add origin [url]\n\n3.直接修改config文件\n\n.git文件夹，找到config，编辑，把就的项目地址替换成新的。\n\ngit 配置\ngit config --list        查看配置列表\n\ngit config --global user.name \"xxx\"   -- 配置用户名，上传本地 repository 到服务器上的时候，在 Github 上会显示这里配置的上传者信息\n\ngit config --global user.email \"xxx\"    -- 配置邮箱\n配置 sshkey ： 上传代码时使用这个 sshkey 来确认是否有上传权限\n    1. 创建本地 ssh ： ssh-keygen -t rsa -C \"Github 的注册邮箱\"\n    2. 在 Github 中添加这个 sshkey ： \n        复制  C:\\Documents and Settings\\Administrator\\.ssh\\id_rsa.pub 文件中的内容；\n        登录 Github --> Account Setting  --> SSH-KEY --> Add SSH-KEY --> 粘贴id_rsa.pub中的内容；\n    3. 验证： ssh -T git@github.com\n        出现 Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. 说明配置成功，可以连接上 Github\n\n使用 .gitignore 文件忽略指定的内容：\n\n    1. 在本地仓库根目录创建 .gitignore 文件。Win7 下不能直接创建，可以创建 \".gitignore.\" 文件，后面的标点自动被忽略；\n    2. 过滤文件和文件夹： [Tt]emp/ 过滤 Temp\\temp 文件夹； *.suo 过滤 .suo 文件；\n    3. 不过滤文件和文件夹： !*.c","slug":"# GIT基本操作","published":1,"date":"2022-06-01T06:43:20.591Z","updated":"2022-06-01T06:43:20.675Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3vevq5y0001ykuicagd8p9n","content":"<h1 id=\"GIT基本操作\"><a href=\"#GIT基本操作\" class=\"headerlink\" title=\"GIT基本操作\"></a>GIT基本操作</h1><p>下面是一些日常操作</p>\n<h2 id=\"1-建立本地仓库\"><a href=\"#1-建立本地仓库\" class=\"headerlink\" title=\"1. 建立本地仓库:\"></a>1. 建立本地仓库:</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init [project-name]  <span class=\"comment\">#创建本地仓库</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:UserName/yourProjectName.git   </span><br><span class=\"line\"><span class=\"comment\">#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@github.com:UserName/yourProjectName.git   </span><br><span class=\"line\"><span class=\"comment\">#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zhoulujun/yourProjectName.git</span><br><span class=\"line\"><span class=\"comment\">#下载github仓库</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-提交本地修改到远程仓库中：\"><a href=\"#2-提交本地修改到远程仓库中：\" class=\"headerlink\" title=\"2.提交本地修改到远程仓库中：\"></a>2.提交本地修改到远程仓库中：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add <span class=\"comment\"># 将改动添加到本地仓库中  </span></span><br><span class=\"line\"></span><br><span class=\"line\">git add [file1] [file2] ...  ||  git add [<span class=\"built_in\">dir</span>] <span class=\"comment\"># 添加指定文件||目录到暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add -A ||  git add . <span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add -p <span class=\"comment\"># 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> xxx      <span class=\"comment\"># 从本地仓库中删除指定文件</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> -r xxx   <span class=\"comment\"># 从本地仓库中删除指定文件夹</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> --cached [file]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">mv</span> [file-original] [file-renamed]  改名文件，并且将这个改名放入暂存区</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;注释&quot;</span>    -- 把本机缓存中的内容提交到本机的 HEAD 里面</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -a 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -v 提交时显示所有diff信息</span><br><span class=\"line\"></span><br><span class=\"line\">git commit --amend -m [message] 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class=\"line\"></span><br><span class=\"line\">git commit --amend [file1] [file2] ... 重做上一次commit，并包括指定文件的新变化</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master  -- 把本地的 commit(提交) push 到远程服务器上， origin 也就是之前 git remote add origin 那个命令里面的 origin，origin 替代了服务器仓库地址：git@github.com:zhoulujun/yourProjectName.git </span><br><span class=\"line\"></span><br><span class=\"line\">git push remoteBranchName tagName提交指定tag</span><br><span class=\"line\"></span><br><span class=\"line\">git push remoteBranchName --tags 提交所有tag</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-git转态查看\"><a href=\"#3-git转态查看\" class=\"headerlink\" title=\"3. git转态查看\"></a>3. git转态查看</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status 查看状态</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 查看本地所有分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -r查看远程所有分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -a查看本地和远程所有分支</span><br></pre></td></tr></table></figure>\n<p>git tag  列出所有tag</p>\n<p>git show tagName 查看tag信息</p>\n<p>git log –stat 显示commit历史，以及每次commit发生变更的文件</p>\n<p>分支操作<br>git checkout branchName 切换到指定分支，并更新工作区</p>\n<p>git merge branchName 合并指定分支到当前分支</p>\n<p>git branch newBranchName 新建一个分支，但依然停留在当前分支</p>\n<p>git branch –track branch remote-branch 新建一个分支，与指定的远程分支建立追踪关系</p>\n<p>git branch -D branchName //删除目标分支</p>\n<p>git checkout -b branchName 新建并切换至新分支</p>\n<p>git branch -d -r branchName 删除远程分支，其中</p>\n<p>git branch -m oldbranchname newbranchname  重命名分支 使用-M则表示强制重命名</p>\n<p>重命名远程分支</p>\n<p>git branch -m old_name new_name 重命名分支</p>\n<p>git checkout -b new_branch_name from_branch_name 本地建立 branch 並立即 checkout 切換過去</p>\n<p>git push origin –delete old_name</p>\n<p>也可以如此操作</p>\n<p>git branch -m old_branch new_branch # Rename branch locally</p>\n<p>git push origin :old_branch # Delete the old branch</p>\n<p>git push –set-upstream origin new_branch 或者git push -u origin new_branch  # Push the new branch, set local branch to track the new remote</p>\n<p>git分支与主干合并操作<br>在主干上合并分支||主干合并分支<br>git merge branch –squash //提交合并后的代码</p>\n<p>git commit -m  ‘合并备注’</p>\n<p>git push //将代码推送到远程仓库</p>\n<p>分支同步主干代码||在分支上合并主干<br>git merge master –squash //提交合并后的代码</p>\n<p>git commit -m  ‘合并备注’ //将代码推送到远程仓库</p>\n<p>git push //将代码推送到远程仓库</p>\n<p>git强制覆盖本地代码<br>与git远程仓库保持一致</p>\n<p>git fetch –all</p>\n<p>git reset –hard origin/master</p>\n<p>git pull</p>\n<p>git强制覆盖本地命令（单条执行）：</p>\n<p>git fetch –all &amp;&amp; git reset –hard origin/master &amp;&amp; git pull</p>\n<p>git修改远程仓库地址<br>方法有三种：</p>\n<p>1.修改命令</p>\n<p>git remote origin set-url [url]</p>\n<p>2.先删后加</p>\n<p>git remote rm origin</p>\n<p>git remote add origin [url]</p>\n<p>3.直接修改config文件</p>\n<p>.git文件夹，找到config，编辑，把就的项目地址替换成新的。</p>\n<p>git 配置<br>git config –list        查看配置列表</p>\n<p>git config –global user.name “xxx”   – 配置用户名，上传本地 repository 到服务器上的时候，在 Github 上会显示这里配置的上传者信息</p>\n<p>git config –global user.email “xxx”    – 配置邮箱<br>配置 sshkey ： 上传代码时使用这个 sshkey 来确认是否有上传权限<br>    1. 创建本地 ssh ： ssh-keygen -t rsa -C “Github 的注册邮箱”<br>    2. 在 Github 中添加这个 sshkey ：<br>        复制  C:\\Documents and Settings\\Administrator.ssh\\id_rsa.pub 文件中的内容；<br>        登录 Github –&gt; Account Setting  –&gt; SSH-KEY –&gt; Add SSH-KEY –&gt; 粘贴id_rsa.pub中的内容；<br>    3. 验证： ssh -T <a href=\"mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;\">&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;</a><br>        出现 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 说明配置成功，可以连接上 Github</p>\n<p>使用 .gitignore 文件忽略指定的内容：</p>\n<pre><code>1. 在本地仓库根目录创建 .gitignore 文件。Win7 下不能直接创建，可以创建 &quot;.gitignore.&quot; 文件，后面的标点自动被忽略；\n2. 过滤文件和文件夹： [Tt]emp/ 过滤 Temp\\temp 文件夹； *.suo 过滤 .suo 文件；\n3. 不过滤文件和文件夹： !*.c\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"GIT基本操作\"><a href=\"#GIT基本操作\" class=\"headerlink\" title=\"GIT基本操作\"></a>GIT基本操作</h1><p>下面是一些日常操作</p>\n<h2 id=\"1-建立本地仓库\"><a href=\"#1-建立本地仓库\" class=\"headerlink\" title=\"1. 建立本地仓库:\"></a>1. 建立本地仓库:</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init [project-name]  <span class=\"comment\">#创建本地仓库</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:UserName/yourProjectName.git   </span><br><span class=\"line\"><span class=\"comment\">#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@github.com:UserName/yourProjectName.git   </span><br><span class=\"line\"><span class=\"comment\">#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zhoulujun/yourProjectName.git</span><br><span class=\"line\"><span class=\"comment\">#下载github仓库</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-提交本地修改到远程仓库中：\"><a href=\"#2-提交本地修改到远程仓库中：\" class=\"headerlink\" title=\"2.提交本地修改到远程仓库中：\"></a>2.提交本地修改到远程仓库中：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add <span class=\"comment\"># 将改动添加到本地仓库中  </span></span><br><span class=\"line\"></span><br><span class=\"line\">git add [file1] [file2] ...  ||  git add [<span class=\"built_in\">dir</span>] <span class=\"comment\"># 添加指定文件||目录到暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add -A ||  git add . <span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add -p <span class=\"comment\"># 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> xxx      <span class=\"comment\"># 从本地仓库中删除指定文件</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> -r xxx   <span class=\"comment\"># 从本地仓库中删除指定文件夹</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> --cached [file]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">mv</span> [file-original] [file-renamed]  改名文件，并且将这个改名放入暂存区</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;注释&quot;</span>    -- 把本机缓存中的内容提交到本机的 HEAD 里面</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -a 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -v 提交时显示所有diff信息</span><br><span class=\"line\"></span><br><span class=\"line\">git commit --amend -m [message] 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class=\"line\"></span><br><span class=\"line\">git commit --amend [file1] [file2] ... 重做上一次commit，并包括指定文件的新变化</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master  -- 把本地的 commit(提交) push 到远程服务器上， origin 也就是之前 git remote add origin 那个命令里面的 origin，origin 替代了服务器仓库地址：git@github.com:zhoulujun/yourProjectName.git </span><br><span class=\"line\"></span><br><span class=\"line\">git push remoteBranchName tagName提交指定tag</span><br><span class=\"line\"></span><br><span class=\"line\">git push remoteBranchName --tags 提交所有tag</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-git转态查看\"><a href=\"#3-git转态查看\" class=\"headerlink\" title=\"3. git转态查看\"></a>3. git转态查看</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status 查看状态</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 查看本地所有分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -r查看远程所有分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -a查看本地和远程所有分支</span><br></pre></td></tr></table></figure>\n<p>git tag  列出所有tag</p>\n<p>git show tagName 查看tag信息</p>\n<p>git log –stat 显示commit历史，以及每次commit发生变更的文件</p>\n<p>分支操作<br>git checkout branchName 切换到指定分支，并更新工作区</p>\n<p>git merge branchName 合并指定分支到当前分支</p>\n<p>git branch newBranchName 新建一个分支，但依然停留在当前分支</p>\n<p>git branch –track branch remote-branch 新建一个分支，与指定的远程分支建立追踪关系</p>\n<p>git branch -D branchName //删除目标分支</p>\n<p>git checkout -b branchName 新建并切换至新分支</p>\n<p>git branch -d -r branchName 删除远程分支，其中</p>\n<p>git branch -m oldbranchname newbranchname  重命名分支 使用-M则表示强制重命名</p>\n<p>重命名远程分支</p>\n<p>git branch -m old_name new_name 重命名分支</p>\n<p>git checkout -b new_branch_name from_branch_name 本地建立 branch 並立即 checkout 切換過去</p>\n<p>git push origin –delete old_name</p>\n<p>也可以如此操作</p>\n<p>git branch -m old_branch new_branch # Rename branch locally</p>\n<p>git push origin :old_branch # Delete the old branch</p>\n<p>git push –set-upstream origin new_branch 或者git push -u origin new_branch  # Push the new branch, set local branch to track the new remote</p>\n<p>git分支与主干合并操作<br>在主干上合并分支||主干合并分支<br>git merge branch –squash //提交合并后的代码</p>\n<p>git commit -m  ‘合并备注’</p>\n<p>git push //将代码推送到远程仓库</p>\n<p>分支同步主干代码||在分支上合并主干<br>git merge master –squash //提交合并后的代码</p>\n<p>git commit -m  ‘合并备注’ //将代码推送到远程仓库</p>\n<p>git push //将代码推送到远程仓库</p>\n<p>git强制覆盖本地代码<br>与git远程仓库保持一致</p>\n<p>git fetch –all</p>\n<p>git reset –hard origin/master</p>\n<p>git pull</p>\n<p>git强制覆盖本地命令（单条执行）：</p>\n<p>git fetch –all &amp;&amp; git reset –hard origin/master &amp;&amp; git pull</p>\n<p>git修改远程仓库地址<br>方法有三种：</p>\n<p>1.修改命令</p>\n<p>git remote origin set-url [url]</p>\n<p>2.先删后加</p>\n<p>git remote rm origin</p>\n<p>git remote add origin [url]</p>\n<p>3.直接修改config文件</p>\n<p>.git文件夹，找到config，编辑，把就的项目地址替换成新的。</p>\n<p>git 配置<br>git config –list        查看配置列表</p>\n<p>git config –global user.name “xxx”   – 配置用户名，上传本地 repository 到服务器上的时候，在 Github 上会显示这里配置的上传者信息</p>\n<p>git config –global user.email “xxx”    – 配置邮箱<br>配置 sshkey ： 上传代码时使用这个 sshkey 来确认是否有上传权限<br>    1. 创建本地 ssh ： ssh-keygen -t rsa -C “Github 的注册邮箱”<br>    2. 在 Github 中添加这个 sshkey ：<br>        复制  C:\\Documents and Settings\\Administrator.ssh\\id_rsa.pub 文件中的内容；<br>        登录 Github –&gt; Account Setting  –&gt; SSH-KEY –&gt; Add SSH-KEY –&gt; 粘贴id_rsa.pub中的内容；<br>    3. 验证： ssh -T <a href=\"mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;\">&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;</a><br>        出现 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 说明配置成功，可以连接上 Github</p>\n<p>使用 .gitignore 文件忽略指定的内容：</p>\n<pre><code>1. 在本地仓库根目录创建 .gitignore 文件。Win7 下不能直接创建，可以创建 &quot;.gitignore.&quot; 文件，后面的标点自动被忽略；\n2. 过滤文件和文件夹： [Tt]emp/ 过滤 Temp\\temp 文件夹； *.suo 过滤 .suo 文件；\n3. 不过滤文件和文件夹： !*.c\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}
=======
{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/article-title.md","hash":"8a2b7eb0137aa723d0946cd95dae83bee66ba46a","modified":1654057302604},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1654049478442},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1654049477980},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1654049478399},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1654049478107},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1654049478447},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1654049478567},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1654049478435},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1654049478569},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1654049478575},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1654049478574},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1654049478576},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1654049478570},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1654049478578},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1654049478578},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1654049478579},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1654049478581},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1654049478583},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1654049478580},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1654049478584},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1654049478229},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1654049478295},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1654049478255},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1654049478311},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1654049478314},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1654049478300},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1654049478334},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1654049478193},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1654049478393},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1654049478200},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1654049478208},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1654049478235},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1654049478266},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1654049478277},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1654049478282},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1654049478304},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1654049478286},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1654049478321},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1654049478292},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1654049478221},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1654049478251},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1654049478330},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1654049478337},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1654049478318},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1654049478520},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1654049478521},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1654049478548},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1654049478353},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1654049478359},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1654049478357},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1654049478514},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1654049478517},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1654049478516},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1654049478179},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1654049478422},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1654049478427},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1654049478430},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1654049478243},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1654049478260},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1654049478273},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1654049478308},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1654049478339},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1654049478326},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1654049478523},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1654049478526},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1654049478532},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1654049478529},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1654049478535},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1654049478539},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1654049478537},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1654049478541},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1654049478543},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1654049478544},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1654049478534},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1654049478539},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1654049478509},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1654049478348},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1654049478563},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1654049478512},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1654049478151},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1654049478413},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1654049478417},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1654049478162},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1654049478418},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1654049478560},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1654049478556},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1654049478377},{"_id":"public/index.html","hash":"129884810db28d190baeba88bf3d9cdc6fbc5d18","modified":1654077447765},{"_id":"public/2022/06/01/article-title/index.html","hash":"06d299ef97c456561c262ce10a17d16ffc284588","modified":1654077239055},{"_id":"public/2022/06/01/hello-world/index.html","hash":"5ebb6866d9e70526442ed2054dd123b80f3ea094","modified":1654077239055},{"_id":"public/archives/2022/index.html","hash":"1a0d3313113a7e019149b0826141c22b48c80bc8","modified":1654077447765},{"_id":"public/archives/index.html","hash":"1c8e8b4f2afda347d88d535c29968515a1080784","modified":1654077447765},{"_id":"public/archives/2022/06/index.html","hash":"6546edaf733af225c8f413f39a1766adee88757e","modified":1654077447765},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1654057447666},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1654057447666},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1654057447666},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1654057447666},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1654057447666},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1654057447666},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1654057447666},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1654057447666},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1654057447666},{"_id":"public/css/style.css","hash":"3986ef4b1f56bf0ac3bc45aab261e0278794c3f1","modified":1654057447666},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1654057447666},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1654057447666},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1654057447666},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1654057447666},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1654057447666},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1654057447666},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1654057447666},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1654057447666},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1654057447666},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1654057447666},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1654057447666},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1654057447666},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1654057447666},{"_id":"source/_posts/5.安装CuDNN.md","hash":"c40eeac7c38a5220669eb12d21878b3b25d97c5d","modified":1654066095927},{"_id":"source/_posts/# GIT基本操作.md","hash":"866982b15083cd1164ab5276478d7b4bb4f10fb5","modified":1654065800675},{"_id":"public/2022/06/01/5.安装CuDNN/index.html","hash":"d1acce245da976a420020911f2dc9cd827bba8e9","modified":1654077447765},{"_id":"public/2022/06/01/# GIT基本操作/index.html","hash":"f2a28df320a2ede80227b1a1e729bf2d585e8e2f","modified":1654077447765}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"由于比赛需要，我和小伙伴给好几台机器都配置了cuda环境。安装cuda的时候虽然参考了很多教程，但也避免不了踩坑，因此总结了一个比较完善的方法。\n\n1.更换linux内核\n\nUbuntu16.04一般都是4.15的内核，而cuda9.0不支持此版本的内核，因此需要更换为4.4版本。\n\n(1)查看已安装的内核版本\n\n```bash\ndpkg -l | grep linux-image\n```\n(2)查看当前使用的内核，若为4.15，则需更换为4.4：\n\n```bash\nuname -r\n```\n(3)查看可以更换的内核\n\n```bash\nsudo apt-cache search linux-image\n```\n(4)安装新内核\n\n```bash\nsudo apt-get install linux-image-4.4.0-77-generic linux-image-extra-4.4.0-77-generic\n```\n(5)更新grub引导\n\n```bash\nsudo update-grub\n```\n(6)重启，在grub引导界面进入Ubuntu高级选项，选择4.4内核\n\n(7)安装对应内核版本的headers文件（一定要先装好4.4版本的headers文件再删除多余内核，否则会出现网卡配置等问题）\n\n```bash\nsudo apt-get install linux-headers-$(uname -r)\n```\n(8)删除多余内核\n\n- linux-headers-版本号：内核头文件\n\n- linux-image-版本号：内核映像文件\n\n- linux-image-extra-版本号：内核扩展文件\n\n```bash\nsudo apt-get purge linux-*4.15*\n```\n(9)更新grub引导\n\n```bash\nsudo update-grub\n```\n2.检查CUDA安装环境\n\n(1)GPU是否支持CUDA\n\n```bash\nlspci | grep -i nvidia\n```\n然后去CUDA的官网查看自己的GPU版本是否在CUDA的支持列表中。\n(2)linux版本是否支持CUDA\n\n```bash\nuname -m &&cat /etc/*release\n```\n(3)安装缺少的依赖库\n\n```bash\nsudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev\n```\n3.禁用nouveau驱动\n\n(1)打开/etc/modprobe.d下的blacklist.conf\n\n```bash\nsudo gedit /etc/modprobe.d/blacklist.conf\n```\n(2)在blacklist.conf的末尾添加：\n\n```bash\nblacklist nouveau\noptions nouveau modeset=0\n```\n(3)执行生效并重启(注：这条命令可能不会生效。如果终端运行了一会儿说明已经生效，重启电脑；如果没有生效可以多运行几次。如果还是不行可以先去掉-u执行再加上)\n\n```bash\nsudo update-initramfs -u\n```\n(4)查看是否已禁用\n\n```bash\nlsmod | grep nouveau\n```\n若无内容输出，则表示禁用成功。\n\n4.安装NVIDIA驱动以及cuda\n\n在安装cuda时会自动安装NVIDIA驱动，但是可能会安装失败所以在这里先安装NVIDIA驱动。下载对应gpu版本的NVIDIA驱动、runfile版本的cuda9.0，分别修改文件名为NVIDIA.run、cuda.run，并放在home目录下，方便输入命令。\n\n(1)安装NVIDIA驱动。重启到登录界面时按Ctrl+Alt+F1进入文字用户界面输入自己的用户名和密码，然后运行以下命令并输入密码\n\n```bash\nsudo su\n```\n关闭图形化界面\n\n```bash\nsudo service lightdm stop\n```\n运行\n\n```bash\ninit 3\n```\n```bash\nsh NVIDIA.run\n```\n安装完成后输入以下命令，可以查看显卡驱动的详细信息\n\n```bash\nnvidia-smi\n```\n(2)输入reboot重启，到登录界面会发现分辨率恢复正常（也有特殊情况）。按Ctrl+Alt+F1进入文字用户界面，运行\n\n```bash\nsudo service lightdm stop\n```\n(3)安装cuda9.0\n\n```bash\nsudo sh cuda.run\n```\n等待一段时间到协议界面，按Ctrl+c跳过协议，因为已经先安装好了NVIDIA驱动，NVIDIA Accelerate Graphics Driver选no；其他yes或default。\n\n(4)重启图形化界面\n\n```bash\nsudo service lightdm start\n```\n按Ctrl+Alt+F7返回图形化登录界面并登录。\n\n(5) 检查Device Node Verification\n\n```bash\nls /dev/nvidia*\n```\n\na.显示\n\n/dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidia-modeset\n\n或类似信息（/dev/nvidia*），则安装成功。\n\nb.显示\n\nls: cannot access/dev/nvidia*: No such file or directory\n\n或者 /dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl ，a中的一个或两个，但没有/dev/nvidia-modeset\n\n则需要添加一个启动脚本\n\n```bash\nsudo vi /etc/rc.local\n```\n\n首先把文件的第一行 #!/bin/sh -e 中的 -e 去掉（这步很重要，否则它不会加载文本的内容）<br>\n然后把下列除了 #!/bin/bash 的内容复制到 exit 0 之前，保存退出。\n\n```bash\n#!/bin/bash\n/sbin/modprobe nvidia\n \nif [ \"$?\" -eq 0 ]; then\n# Count the number of NVIDIA controllers found.\nNVDEVS=`lspci | grep -i NVIDIA`\nN3D=`echo \"$NVDEVS\" | grep \"3D controller\" | wc -l`\nNVGA=`echo \"$NVDEVS\" | grep \"VGA compatible controller\" | wc -l`\n \nN=`expr $N3D + $NVGA - 1`\nfor i in `seq 0 $N`; do\nmknod -m 666 /dev/nvidia$i c 195 $i\ndone\n \nmknod -m 666 /dev/nvidiactl c 195 255\n \nelse\nexit 1\nfi\n \n/sbin/modprobe nvidia-uvm\n \nif [ \"$?\" -eq 0 ]; then\n# Find out the major device number used by the nvidia-uvm driver\nD=`grep nvidia-uvm /proc/devices | awk '{print $1}'`\n \nmknod -m 666 /dev/nvidia-uvm c $D 0\nelse\nexit 1\nfi\n```\n\n下次重启时，应该能直接看到/dev目录下的三个nvidia的文件\n\n(6) 设置环境变量\n\n```bash\nsudo gedit /etc/profile\n```\n\n在文件末尾添加以下两行：\n\n```bash\nexport PATH=/usr/local/cuda-9.0/bin${PATH:+:${PATH}}\nexport LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n```\n\n保存文件并重启，因为profile在重启电脑之后才永久生效\n\n(7) 检查上述的环境变量是否设置成功。\n\na.验证驱动版本\n\n```bash\ncat /proc/driver/nvidia/version\n```\n\nb.验证CUDA Toolkit，会输出CUDA的版本信息\n\n\n```bash\nnvcc -V\n```\n\n(8)尝试编译cuda提供samples\n\na.打开终端输入：\n\n```bash\ncd /home/xxx/NVIDIA_CUDA-9.0_Samples\n```\n\n其中xxx是自己的用户名\n\n然后输入：\n\n```bash\nmake\n```\n\n系统就会自动进入到编译过程，整个过程大概需要十几到二十分钟，请耐心等待。如果出现错误的话，系统会立即报错停止。第一次运行时可能会报错，提示的错误信息可能会是系统中没有gcc，解决办法就是通过命令重新安装gcc，在终端输入：\n\n\n```bash\nsudo apt-get install gcc\n```\n\n 安装完gcc后， 再make就正常了。如果编译成功，最后会显示Finished building CUDA samples。\n\nb.运行编译生成的二进制文件\n编译后的二进制文件默认存放在NVIDIA_CUDA-9.0_Samples/bin中，接着输入：\n\n```bash\ncd /home/xxx/NVIDIA_CUDA-9.0_Samples/bin/x86_64/linux/release\n```\n```bash\n./deviceQuery\n```\n最后显示Result = PASS代表成功，若失败 Result = FAIL。\n\nc.最后再检查一下系统和CUDA-Capable device的连接情况\n\n```bash\n./bandwidthTest\n```\n最后显示Result = PASS代表成功，若失败 Result = FAIL。\n\n<h3><a name=\"t4\"></a>5.安装CuDNN</h3>\n\n在文件所在目录解压，xx是自己的cudnn版本号\n\n```bash\nsudo tar -xzvf cudnn-xx.tgz\n```\n执行\n\n```bash\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include\n```\n```bash\nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\n```\n添加权限\n\n```bash\nsudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*","source":"_posts/5.安装CuDNN.md","raw":"由于比赛需要，我和小伙伴给好几台机器都配置了cuda环境。安装cuda的时候虽然参考了很多教程，但也避免不了踩坑，因此总结了一个比较完善的方法。\n\n1.更换linux内核\n\nUbuntu16.04一般都是4.15的内核，而cuda9.0不支持此版本的内核，因此需要更换为4.4版本。\n\n(1)查看已安装的内核版本\n\n```bash\ndpkg -l | grep linux-image\n```\n(2)查看当前使用的内核，若为4.15，则需更换为4.4：\n\n```bash\nuname -r\n```\n(3)查看可以更换的内核\n\n```bash\nsudo apt-cache search linux-image\n```\n(4)安装新内核\n\n```bash\nsudo apt-get install linux-image-4.4.0-77-generic linux-image-extra-4.4.0-77-generic\n```\n(5)更新grub引导\n\n```bash\nsudo update-grub\n```\n(6)重启，在grub引导界面进入Ubuntu高级选项，选择4.4内核\n\n(7)安装对应内核版本的headers文件（一定要先装好4.4版本的headers文件再删除多余内核，否则会出现网卡配置等问题）\n\n```bash\nsudo apt-get install linux-headers-$(uname -r)\n```\n(8)删除多余内核\n\n- linux-headers-版本号：内核头文件\n\n- linux-image-版本号：内核映像文件\n\n- linux-image-extra-版本号：内核扩展文件\n\n```bash\nsudo apt-get purge linux-*4.15*\n```\n(9)更新grub引导\n\n```bash\nsudo update-grub\n```\n2.检查CUDA安装环境\n\n(1)GPU是否支持CUDA\n\n```bash\nlspci | grep -i nvidia\n```\n然后去CUDA的官网查看自己的GPU版本是否在CUDA的支持列表中。\n(2)linux版本是否支持CUDA\n\n```bash\nuname -m &&cat /etc/*release\n```\n(3)安装缺少的依赖库\n\n```bash\nsudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev\n```\n3.禁用nouveau驱动\n\n(1)打开/etc/modprobe.d下的blacklist.conf\n\n```bash\nsudo gedit /etc/modprobe.d/blacklist.conf\n```\n(2)在blacklist.conf的末尾添加：\n\n```bash\nblacklist nouveau\noptions nouveau modeset=0\n```\n(3)执行生效并重启(注：这条命令可能不会生效。如果终端运行了一会儿说明已经生效，重启电脑；如果没有生效可以多运行几次。如果还是不行可以先去掉-u执行再加上)\n\n```bash\nsudo update-initramfs -u\n```\n(4)查看是否已禁用\n\n```bash\nlsmod | grep nouveau\n```\n若无内容输出，则表示禁用成功。\n\n4.安装NVIDIA驱动以及cuda\n\n在安装cuda时会自动安装NVIDIA驱动，但是可能会安装失败所以在这里先安装NVIDIA驱动。下载对应gpu版本的NVIDIA驱动、runfile版本的cuda9.0，分别修改文件名为NVIDIA.run、cuda.run，并放在home目录下，方便输入命令。\n\n(1)安装NVIDIA驱动。重启到登录界面时按Ctrl+Alt+F1进入文字用户界面输入自己的用户名和密码，然后运行以下命令并输入密码\n\n```bash\nsudo su\n```\n关闭图形化界面\n\n```bash\nsudo service lightdm stop\n```\n运行\n\n```bash\ninit 3\n```\n```bash\nsh NVIDIA.run\n```\n安装完成后输入以下命令，可以查看显卡驱动的详细信息\n\n```bash\nnvidia-smi\n```\n(2)输入reboot重启，到登录界面会发现分辨率恢复正常（也有特殊情况）。按Ctrl+Alt+F1进入文字用户界面，运行\n\n```bash\nsudo service lightdm stop\n```\n(3)安装cuda9.0\n\n```bash\nsudo sh cuda.run\n```\n等待一段时间到协议界面，按Ctrl+c跳过协议，因为已经先安装好了NVIDIA驱动，NVIDIA Accelerate Graphics Driver选no；其他yes或default。\n\n(4)重启图形化界面\n\n```bash\nsudo service lightdm start\n```\n按Ctrl+Alt+F7返回图形化登录界面并登录。\n\n(5) 检查Device Node Verification\n\n```bash\nls /dev/nvidia*\n```\n\na.显示\n\n/dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidia-modeset\n\n或类似信息（/dev/nvidia*），则安装成功。\n\nb.显示\n\nls: cannot access/dev/nvidia*: No such file or directory\n\n或者 /dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl ，a中的一个或两个，但没有/dev/nvidia-modeset\n\n则需要添加一个启动脚本\n\n```bash\nsudo vi /etc/rc.local\n```\n\n首先把文件的第一行 #!/bin/sh -e 中的 -e 去掉（这步很重要，否则它不会加载文本的内容）<br>\n然后把下列除了 #!/bin/bash 的内容复制到 exit 0 之前，保存退出。\n\n```bash\n#!/bin/bash\n/sbin/modprobe nvidia\n \nif [ \"$?\" -eq 0 ]; then\n# Count the number of NVIDIA controllers found.\nNVDEVS=`lspci | grep -i NVIDIA`\nN3D=`echo \"$NVDEVS\" | grep \"3D controller\" | wc -l`\nNVGA=`echo \"$NVDEVS\" | grep \"VGA compatible controller\" | wc -l`\n \nN=`expr $N3D + $NVGA - 1`\nfor i in `seq 0 $N`; do\nmknod -m 666 /dev/nvidia$i c 195 $i\ndone\n \nmknod -m 666 /dev/nvidiactl c 195 255\n \nelse\nexit 1\nfi\n \n/sbin/modprobe nvidia-uvm\n \nif [ \"$?\" -eq 0 ]; then\n# Find out the major device number used by the nvidia-uvm driver\nD=`grep nvidia-uvm /proc/devices | awk '{print $1}'`\n \nmknod -m 666 /dev/nvidia-uvm c $D 0\nelse\nexit 1\nfi\n```\n\n下次重启时，应该能直接看到/dev目录下的三个nvidia的文件\n\n(6) 设置环境变量\n\n```bash\nsudo gedit /etc/profile\n```\n\n在文件末尾添加以下两行：\n\n```bash\nexport PATH=/usr/local/cuda-9.0/bin${PATH:+:${PATH}}\nexport LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n```\n\n保存文件并重启，因为profile在重启电脑之后才永久生效\n\n(7) 检查上述的环境变量是否设置成功。\n\na.验证驱动版本\n\n```bash\ncat /proc/driver/nvidia/version\n```\n\nb.验证CUDA Toolkit，会输出CUDA的版本信息\n\n\n```bash\nnvcc -V\n```\n\n(8)尝试编译cuda提供samples\n\na.打开终端输入：\n\n```bash\ncd /home/xxx/NVIDIA_CUDA-9.0_Samples\n```\n\n其中xxx是自己的用户名\n\n然后输入：\n\n```bash\nmake\n```\n\n系统就会自动进入到编译过程，整个过程大概需要十几到二十分钟，请耐心等待。如果出现错误的话，系统会立即报错停止。第一次运行时可能会报错，提示的错误信息可能会是系统中没有gcc，解决办法就是通过命令重新安装gcc，在终端输入：\n\n\n```bash\nsudo apt-get install gcc\n```\n\n 安装完gcc后， 再make就正常了。如果编译成功，最后会显示Finished building CUDA samples。\n\nb.运行编译生成的二进制文件\n编译后的二进制文件默认存放在NVIDIA_CUDA-9.0_Samples/bin中，接着输入：\n\n```bash\ncd /home/xxx/NVIDIA_CUDA-9.0_Samples/bin/x86_64/linux/release\n```\n```bash\n./deviceQuery\n```\n最后显示Result = PASS代表成功，若失败 Result = FAIL。\n\nc.最后再检查一下系统和CUDA-Capable device的连接情况\n\n```bash\n./bandwidthTest\n```\n最后显示Result = PASS代表成功，若失败 Result = FAIL。\n\n<h3><a name=\"t4\"></a>5.安装CuDNN</h3>\n\n在文件所在目录解压，xx是自己的cudnn版本号\n\n```bash\nsudo tar -xzvf cudnn-xx.tgz\n```\n执行\n\n```bash\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include\n```\n```bash\nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\n```\n添加权限\n\n```bash\nsudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*","slug":"5.安装CuDNN","published":1,"date":"2022-06-01T06:48:15.850Z","updated":"2022-06-01T06:48:15.927Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3vevq5t0000ykui15306sek","content":"<p>由于比赛需要，我和小伙伴给好几台机器都配置了cuda环境。安装cuda的时候虽然参考了很多教程，但也避免不了踩坑，因此总结了一个比较完善的方法。</p>\n<p>1.更换linux内核</p>\n<p>Ubuntu16.04一般都是4.15的内核，而cuda9.0不支持此版本的内核，因此需要更换为4.4版本。</p>\n<p>(1)查看已安装的内核版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -l | grep linux-image</span><br></pre></td></tr></table></figure>\n<p>(2)查看当前使用的内核，若为4.15，则需更换为4.4：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> -r</span><br></pre></td></tr></table></figure>\n<p>(3)查看可以更换的内核</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-cache search linux-image</span><br></pre></td></tr></table></figure>\n<p>(4)安装新内核</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-image-4.4.0-77-generic linux-image-extra-4.4.0-77-generic</span><br></pre></td></tr></table></figure>\n<p>(5)更新grub引导</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n<p>(6)重启，在grub引导界面进入Ubuntu高级选项，选择4.4内核</p>\n<p>(7)安装对应内核版本的headers文件（一定要先装好4.4版本的headers文件再删除多余内核，否则会出现网卡配置等问题）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-headers-$(<span class=\"built_in\">uname</span> -r)</span><br></pre></td></tr></table></figure>\n<p>(8)删除多余内核</p>\n<ul>\n<li><p>linux-headers-版本号：内核头文件</p>\n</li>\n<li><p>linux-image-版本号：内核映像文件</p>\n</li>\n<li><p>linux-image-extra-版本号：内核扩展文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get purge linux-*4.15*</span><br></pre></td></tr></table></figure>\n<p>(9)更新grub引导</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n<p>2.检查CUDA安装环境</p>\n<p>(1)GPU是否支持CUDA</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>\n<p>然后去CUDA的官网查看自己的GPU版本是否在CUDA的支持列表中。<br>(2)linux版本是否支持CUDA</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> -m &amp;&amp;<span class=\"built_in\">cat</span> /etc/*release</span><br></pre></td></tr></table></figure>\n<p>(3)安装缺少的依赖库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev</span><br></pre></td></tr></table></figure>\n<p>3.禁用nouveau驱动</p>\n<p>(1)打开/etc/modprobe.d下的blacklist.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure>\n<p>(2)在blacklist.conf的末尾添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist nouveau</span><br><span class=\"line\">options nouveau modeset=0</span><br></pre></td></tr></table></figure>\n<p>(3)执行生效并重启(注：这条命令可能不会生效。如果终端运行了一会儿说明已经生效，重启电脑；如果没有生效可以多运行几次。如果还是不行可以先去掉-u执行再加上)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>\n<p>(4)查看是否已禁用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>\n<p>若无内容输出，则表示禁用成功。</p>\n<p>4.安装NVIDIA驱动以及cuda</p>\n<p>在安装cuda时会自动安装NVIDIA驱动，但是可能会安装失败所以在这里先安装NVIDIA驱动。下载对应gpu版本的NVIDIA驱动、runfile版本的cuda9.0，分别修改文件名为NVIDIA.run、cuda.run，并放在home目录下，方便输入命令。</p>\n<p>(1)安装NVIDIA驱动。重启到登录界面时按Ctrl+Alt+F1进入文字用户界面输入自己的用户名和密码，然后运行以下命令并输入密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br></pre></td></tr></table></figure>\n<p>关闭图形化界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init 3</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh NVIDIA.run</span><br></pre></td></tr></table></figure>\n<p>安装完成后输入以下命令，可以查看显卡驱动的详细信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n<p>(2)输入reboot重启，到登录界面会发现分辨率恢复正常（也有特殊情况）。按Ctrl+Alt+F1进入文字用户界面，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n<p>(3)安装cuda9.0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh cuda.run</span><br></pre></td></tr></table></figure>\n<p>等待一段时间到协议界面，按Ctrl+c跳过协议，因为已经先安装好了NVIDIA驱动，NVIDIA Accelerate Graphics Driver选no；其他yes或default。</p>\n<p>(4)重启图形化界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm start</span><br></pre></td></tr></table></figure>\n<p>按Ctrl+Alt+F7返回图形化登录界面并登录。</p>\n<p>(5) 检查Device Node Verification</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> /dev/nvidia*</span><br></pre></td></tr></table></figure>\n\n<p>a.显示</p>\n<p>/dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidia-modeset</p>\n<p>或类似信息（/dev/nvidia*），则安装成功。</p>\n<p>b.显示</p>\n<p>ls: cannot access/dev/nvidia*: No such file or directory</p>\n<p>或者 /dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl ，a中的一个或两个，但没有/dev/nvidia-modeset</p>\n<p>则需要添加一个启动脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>首先把文件的第一行 #!/bin/sh -e 中的 -e 去掉（这步很重要，否则它不会加载文本的内容）<br><br>然后把下列除了 #!/bin/bash 的内容复制到 exit 0 之前，保存退出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">/sbin/modprobe nvidia</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;$?&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\"># Count the number of NVIDIA controllers found.</span></span><br><span class=\"line\">NVDEVS=`lspci | grep -i NVIDIA`</span><br><span class=\"line\">N3D=`<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$NVDEVS</span>&quot;</span> | grep <span class=\"string\">&quot;3D controller&quot;</span> | <span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\">NVGA=`<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$NVDEVS</span>&quot;</span> | grep <span class=\"string\">&quot;VGA compatible controller&quot;</span> | <span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\"> </span><br><span class=\"line\">N=`<span class=\"built_in\">expr</span> <span class=\"variable\">$N3D</span> + <span class=\"variable\">$NVGA</span> - 1`</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `<span class=\"built_in\">seq</span> 0 <span class=\"variable\">$N</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidia<span class=\"variable\">$i</span> c 195 <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidiactl c 195 255</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"> </span><br><span class=\"line\">/sbin/modprobe nvidia-uvm</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;$?&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\"># Find out the major device number used by the nvidia-uvm driver</span></span><br><span class=\"line\">D=`grep nvidia-uvm /proc/devices | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidia-uvm c <span class=\"variable\">$D</span> 0</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p>下次重启时，应该能直接看到/dev目录下的三个nvidia的文件</p>\n<p>(6) 设置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>在文件末尾添加以下两行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/local/cuda-9.0/bin<span class=\"variable\">$&#123;PATH:+:<span class=\"variable\">$&#123;PATH&#125;</span>&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64<span class=\"variable\">$&#123;LD_LIBRARY_PATH:+:<span class=\"variable\">$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>保存文件并重启，因为profile在重启电脑之后才永久生效</p>\n<p>(7) 检查上述的环境变量是否设置成功。</p>\n<p>a.验证驱动版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure>\n\n<p>b.验证CUDA Toolkit，会输出CUDA的版本信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc -V</span><br></pre></td></tr></table></figure>\n\n<p>(8)尝试编译cuda提供samples</p>\n<p>a.打开终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/xxx/NVIDIA_CUDA-9.0_Samples</span><br></pre></td></tr></table></figure>\n\n<p>其中xxx是自己的用户名</p>\n<p>然后输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>系统就会自动进入到编译过程，整个过程大概需要十几到二十分钟，请耐心等待。如果出现错误的话，系统会立即报错停止。第一次运行时可能会报错，提示的错误信息可能会是系统中没有gcc，解决办法就是通过命令重新安装gcc，在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gcc</span><br></pre></td></tr></table></figure>\n\n<p> 安装完gcc后， 再make就正常了。如果编译成功，最后会显示Finished building CUDA samples。</p>\n<p>b.运行编译生成的二进制文件<br>编译后的二进制文件默认存放在NVIDIA_CUDA-9.0_Samples/bin中，接着输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/xxx/NVIDIA_CUDA-9.0_Samples/bin/x86_64/linux/release</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./deviceQuery</span><br></pre></td></tr></table></figure>\n<p>最后显示Result = PASS代表成功，若失败 Result = FAIL。</p>\n<p>c.最后再检查一下系统和CUDA-Capable device的连接情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bandwidthTest</span><br></pre></td></tr></table></figure>\n<p>最后显示Result = PASS代表成功，若失败 Result = FAIL。</p>\n<h3><a name=\"t4\"></a>5.安装CuDNN</h3>\n\n<p>在文件所在目录解压，xx是自己的cudnn版本号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -xzvf cudnn-xx.tgz</span><br></pre></td></tr></table></figure>\n<p>执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> cuda/include/cudnn.h /usr/local/cuda/include</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br></pre></td></tr></table></figure>\n<p>添加权限</p>\n<p>```bash<br>sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</p>\n","site":{"data":{}},"excerpt":"","more":"<p>由于比赛需要，我和小伙伴给好几台机器都配置了cuda环境。安装cuda的时候虽然参考了很多教程，但也避免不了踩坑，因此总结了一个比较完善的方法。</p>\n<p>1.更换linux内核</p>\n<p>Ubuntu16.04一般都是4.15的内核，而cuda9.0不支持此版本的内核，因此需要更换为4.4版本。</p>\n<p>(1)查看已安装的内核版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -l | grep linux-image</span><br></pre></td></tr></table></figure>\n<p>(2)查看当前使用的内核，若为4.15，则需更换为4.4：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> -r</span><br></pre></td></tr></table></figure>\n<p>(3)查看可以更换的内核</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-cache search linux-image</span><br></pre></td></tr></table></figure>\n<p>(4)安装新内核</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-image-4.4.0-77-generic linux-image-extra-4.4.0-77-generic</span><br></pre></td></tr></table></figure>\n<p>(5)更新grub引导</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n<p>(6)重启，在grub引导界面进入Ubuntu高级选项，选择4.4内核</p>\n<p>(7)安装对应内核版本的headers文件（一定要先装好4.4版本的headers文件再删除多余内核，否则会出现网卡配置等问题）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-headers-$(<span class=\"built_in\">uname</span> -r)</span><br></pre></td></tr></table></figure>\n<p>(8)删除多余内核</p>\n<ul>\n<li><p>linux-headers-版本号：内核头文件</p>\n</li>\n<li><p>linux-image-版本号：内核映像文件</p>\n</li>\n<li><p>linux-image-extra-版本号：内核扩展文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get purge linux-*4.15*</span><br></pre></td></tr></table></figure>\n<p>(9)更新grub引导</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n<p>2.检查CUDA安装环境</p>\n<p>(1)GPU是否支持CUDA</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>\n<p>然后去CUDA的官网查看自己的GPU版本是否在CUDA的支持列表中。<br>(2)linux版本是否支持CUDA</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> -m &amp;&amp;<span class=\"built_in\">cat</span> /etc/*release</span><br></pre></td></tr></table></figure>\n<p>(3)安装缺少的依赖库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev</span><br></pre></td></tr></table></figure>\n<p>3.禁用nouveau驱动</p>\n<p>(1)打开/etc/modprobe.d下的blacklist.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure>\n<p>(2)在blacklist.conf的末尾添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist nouveau</span><br><span class=\"line\">options nouveau modeset=0</span><br></pre></td></tr></table></figure>\n<p>(3)执行生效并重启(注：这条命令可能不会生效。如果终端运行了一会儿说明已经生效，重启电脑；如果没有生效可以多运行几次。如果还是不行可以先去掉-u执行再加上)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>\n<p>(4)查看是否已禁用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>\n<p>若无内容输出，则表示禁用成功。</p>\n<p>4.安装NVIDIA驱动以及cuda</p>\n<p>在安装cuda时会自动安装NVIDIA驱动，但是可能会安装失败所以在这里先安装NVIDIA驱动。下载对应gpu版本的NVIDIA驱动、runfile版本的cuda9.0，分别修改文件名为NVIDIA.run、cuda.run，并放在home目录下，方便输入命令。</p>\n<p>(1)安装NVIDIA驱动。重启到登录界面时按Ctrl+Alt+F1进入文字用户界面输入自己的用户名和密码，然后运行以下命令并输入密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br></pre></td></tr></table></figure>\n<p>关闭图形化界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init 3</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh NVIDIA.run</span><br></pre></td></tr></table></figure>\n<p>安装完成后输入以下命令，可以查看显卡驱动的详细信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n<p>(2)输入reboot重启，到登录界面会发现分辨率恢复正常（也有特殊情况）。按Ctrl+Alt+F1进入文字用户界面，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n<p>(3)安装cuda9.0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh cuda.run</span><br></pre></td></tr></table></figure>\n<p>等待一段时间到协议界面，按Ctrl+c跳过协议，因为已经先安装好了NVIDIA驱动，NVIDIA Accelerate Graphics Driver选no；其他yes或default。</p>\n<p>(4)重启图形化界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm start</span><br></pre></td></tr></table></figure>\n<p>按Ctrl+Alt+F7返回图形化登录界面并登录。</p>\n<p>(5) 检查Device Node Verification</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> /dev/nvidia*</span><br></pre></td></tr></table></figure>\n\n<p>a.显示</p>\n<p>/dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidia-modeset</p>\n<p>或类似信息（/dev/nvidia*），则安装成功。</p>\n<p>b.显示</p>\n<p>ls: cannot access/dev/nvidia*: No such file or directory</p>\n<p>或者 /dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl ，a中的一个或两个，但没有/dev/nvidia-modeset</p>\n<p>则需要添加一个启动脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>首先把文件的第一行 #!/bin/sh -e 中的 -e 去掉（这步很重要，否则它不会加载文本的内容）<br><br>然后把下列除了 #!/bin/bash 的内容复制到 exit 0 之前，保存退出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">/sbin/modprobe nvidia</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;$?&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\"># Count the number of NVIDIA controllers found.</span></span><br><span class=\"line\">NVDEVS=`lspci | grep -i NVIDIA`</span><br><span class=\"line\">N3D=`<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$NVDEVS</span>&quot;</span> | grep <span class=\"string\">&quot;3D controller&quot;</span> | <span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\">NVGA=`<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$NVDEVS</span>&quot;</span> | grep <span class=\"string\">&quot;VGA compatible controller&quot;</span> | <span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\"> </span><br><span class=\"line\">N=`<span class=\"built_in\">expr</span> <span class=\"variable\">$N3D</span> + <span class=\"variable\">$NVGA</span> - 1`</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `<span class=\"built_in\">seq</span> 0 <span class=\"variable\">$N</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidia<span class=\"variable\">$i</span> c 195 <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidiactl c 195 255</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"> </span><br><span class=\"line\">/sbin/modprobe nvidia-uvm</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;$?&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\"># Find out the major device number used by the nvidia-uvm driver</span></span><br><span class=\"line\">D=`grep nvidia-uvm /proc/devices | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidia-uvm c <span class=\"variable\">$D</span> 0</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p>下次重启时，应该能直接看到/dev目录下的三个nvidia的文件</p>\n<p>(6) 设置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>在文件末尾添加以下两行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/local/cuda-9.0/bin<span class=\"variable\">$&#123;PATH:+:<span class=\"variable\">$&#123;PATH&#125;</span>&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64<span class=\"variable\">$&#123;LD_LIBRARY_PATH:+:<span class=\"variable\">$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>保存文件并重启，因为profile在重启电脑之后才永久生效</p>\n<p>(7) 检查上述的环境变量是否设置成功。</p>\n<p>a.验证驱动版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure>\n\n<p>b.验证CUDA Toolkit，会输出CUDA的版本信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc -V</span><br></pre></td></tr></table></figure>\n\n<p>(8)尝试编译cuda提供samples</p>\n<p>a.打开终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/xxx/NVIDIA_CUDA-9.0_Samples</span><br></pre></td></tr></table></figure>\n\n<p>其中xxx是自己的用户名</p>\n<p>然后输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>系统就会自动进入到编译过程，整个过程大概需要十几到二十分钟，请耐心等待。如果出现错误的话，系统会立即报错停止。第一次运行时可能会报错，提示的错误信息可能会是系统中没有gcc，解决办法就是通过命令重新安装gcc，在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gcc</span><br></pre></td></tr></table></figure>\n\n<p> 安装完gcc后， 再make就正常了。如果编译成功，最后会显示Finished building CUDA samples。</p>\n<p>b.运行编译生成的二进制文件<br>编译后的二进制文件默认存放在NVIDIA_CUDA-9.0_Samples/bin中，接着输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/xxx/NVIDIA_CUDA-9.0_Samples/bin/x86_64/linux/release</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./deviceQuery</span><br></pre></td></tr></table></figure>\n<p>最后显示Result = PASS代表成功，若失败 Result = FAIL。</p>\n<p>c.最后再检查一下系统和CUDA-Capable device的连接情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bandwidthTest</span><br></pre></td></tr></table></figure>\n<p>最后显示Result = PASS代表成功，若失败 Result = FAIL。</p>\n<h3><a name=\"t4\"></a>5.安装CuDNN</h3>\n\n<p>在文件所在目录解压，xx是自己的cudnn版本号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -xzvf cudnn-xx.tgz</span><br></pre></td></tr></table></figure>\n<p>执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> cuda/include/cudnn.h /usr/local/cuda/include</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br></pre></td></tr></table></figure>\n<p>添加权限</p>\n<p>```bash<br>sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</p>\n"},{"_content":"# GIT基本操作\n下面是一些日常操作\n\n## 1. 建立本地仓库:\n\n```bash\ngit init [project-name]  #创建本地仓库\n```\n\n\n```bash\ngit remote add origin git@github.com:UserName/yourProjectName.git   \n#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址\n\ngit remote add origin git@github.com:UserName/yourProjectName.git   \n#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址\n\ngit clone https://github.com/zhoulujun/yourProjectName.git\n#下载github仓库\n```\n\n## 2.提交本地修改到远程仓库中：\n``` bash\ngit add # 将改动添加到本地仓库中  \n\ngit add [file1] [file2] ...  ||  git add [dir] # 添加指定文件||目录到暂存区\n\ngit add -A ||  git add . # 添加当前目录的所有文件到暂存区\n\ngit add -p # 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交\n```\n\n``` bash\ngit rm xxx      # 从本地仓库中删除指定文件\ngit rm -r xxx   # 从本地仓库中删除指定文件夹\n\ngit rm --cached [file]\n```\n``` bash\ngit mv [file-original] [file-renamed]  改名文件，并且将这个改名放入暂存区\n```\n``` bash\ngit commit -m \"注释\"    -- 把本机缓存中的内容提交到本机的 HEAD 里面\n\ngit commit -a 提交工作区自上次commit之后的变化，直接到仓库区\n\ngit commit -v 提交时显示所有diff信息\n\ngit commit --amend -m [message] 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\ngit commit --amend [file1] [file2] ... 重做上一次commit，并包括指定文件的新变化\n```\n``` bash\ngit push origin master  -- 把本地的 commit(提交) push 到远程服务器上， origin 也就是之前 git remote add origin 那个命令里面的 origin，origin 替代了服务器仓库地址：git@github.com:zhoulujun/yourProjectName.git \n\ngit push remoteBranchName tagName提交指定tag\n\ngit push remoteBranchName --tags 提交所有tag\n```\n\n## 3. git转态查看\n``` bash\ngit status 查看状态\n```\n``` bash\ngit branch 查看本地所有分支\n\ngit branch -r查看远程所有分支\n\ngit branch -a查看本地和远程所有分支\n```\ngit tag  列出所有tag\n\ngit show tagName 查看tag信息\n\ngit log --stat 显示commit历史，以及每次commit发生变更的文件\n\n分支操作\ngit checkout branchName 切换到指定分支，并更新工作区\n\ngit merge branchName 合并指定分支到当前分支\n\ngit branch newBranchName 新建一个分支，但依然停留在当前分支\n\ngit branch --track branch remote-branch 新建一个分支，与指定的远程分支建立追踪关系\n\ngit branch -D branchName //删除目标分支\n\ngit checkout -b branchName 新建并切换至新分支\n\ngit branch -d -r branchName 删除远程分支，其中\n\ngit branch -m oldbranchname newbranchname  重命名分支 使用-M则表示强制重命名\n\n重命名远程分支\n\ngit branch -m old_name new_name 重命名分支\n\ngit checkout -b new_branch_name from_branch_name 本地建立 branch 並立即 checkout 切換過去\n\ngit push origin –delete old_name\n\n也可以如此操作\n\ngit branch -m old_branch new_branch # Rename branch locally\n\ngit push origin :old_branch # Delete the old branch\n\ngit push --set-upstream origin new_branch 或者git push -u origin new_branch  # Push the new branch, set local branch to track the new remote\n\ngit分支与主干合并操作\n在主干上合并分支||主干合并分支\ngit merge branch --squash //提交合并后的代码\n\ngit commit -m  ‘合并备注’\n\ngit push //将代码推送到远程仓库\n\n分支同步主干代码||在分支上合并主干\ngit merge master --squash //提交合并后的代码\n\ngit commit -m  ‘合并备注’ //将代码推送到远程仓库\n\ngit push //将代码推送到远程仓库\n\ngit强制覆盖本地代码\n与git远程仓库保持一致\n\ngit fetch --all\n\ngit reset --hard origin/master\n\ngit pull\n\ngit强制覆盖本地命令（单条执行）：\n\ngit fetch --all && git reset --hard origin/master && git pull\n\ngit修改远程仓库地址\n方法有三种：\n\n1.修改命令\n\ngit remote origin set-url [url]\n\n2.先删后加\n\ngit remote rm origin\n\ngit remote add origin [url]\n\n3.直接修改config文件\n\n.git文件夹，找到config，编辑，把就的项目地址替换成新的。\n\ngit 配置\ngit config --list        查看配置列表\n\ngit config --global user.name \"xxx\"   -- 配置用户名，上传本地 repository 到服务器上的时候，在 Github 上会显示这里配置的上传者信息\n\ngit config --global user.email \"xxx\"    -- 配置邮箱\n配置 sshkey ： 上传代码时使用这个 sshkey 来确认是否有上传权限\n    1. 创建本地 ssh ： ssh-keygen -t rsa -C \"Github 的注册邮箱\"\n    2. 在 Github 中添加这个 sshkey ： \n        复制  C:\\Documents and Settings\\Administrator\\.ssh\\id_rsa.pub 文件中的内容；\n        登录 Github --> Account Setting  --> SSH-KEY --> Add SSH-KEY --> 粘贴id_rsa.pub中的内容；\n    3. 验证： ssh -T git@github.com\n        出现 Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. 说明配置成功，可以连接上 Github\n\n使用 .gitignore 文件忽略指定的内容：\n\n    1. 在本地仓库根目录创建 .gitignore 文件。Win7 下不能直接创建，可以创建 \".gitignore.\" 文件，后面的标点自动被忽略；\n    2. 过滤文件和文件夹： [Tt]emp/ 过滤 Temp\\temp 文件夹； *.suo 过滤 .suo 文件；\n    3. 不过滤文件和文件夹： !*.c","source":"_posts/# GIT基本操作.md","raw":"# GIT基本操作\n下面是一些日常操作\n\n## 1. 建立本地仓库:\n\n```bash\ngit init [project-name]  #创建本地仓库\n```\n\n\n```bash\ngit remote add origin git@github.com:UserName/yourProjectName.git   \n#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址\n\ngit remote add origin git@github.com:UserName/yourProjectName.git   \n#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址\n\ngit clone https://github.com/zhoulujun/yourProjectName.git\n#下载github仓库\n```\n\n## 2.提交本地修改到远程仓库中：\n``` bash\ngit add # 将改动添加到本地仓库中  \n\ngit add [file1] [file2] ...  ||  git add [dir] # 添加指定文件||目录到暂存区\n\ngit add -A ||  git add . # 添加当前目录的所有文件到暂存区\n\ngit add -p # 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交\n```\n\n``` bash\ngit rm xxx      # 从本地仓库中删除指定文件\ngit rm -r xxx   # 从本地仓库中删除指定文件夹\n\ngit rm --cached [file]\n```\n``` bash\ngit mv [file-original] [file-renamed]  改名文件，并且将这个改名放入暂存区\n```\n``` bash\ngit commit -m \"注释\"    -- 把本机缓存中的内容提交到本机的 HEAD 里面\n\ngit commit -a 提交工作区自上次commit之后的变化，直接到仓库区\n\ngit commit -v 提交时显示所有diff信息\n\ngit commit --amend -m [message] 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\ngit commit --amend [file1] [file2] ... 重做上一次commit，并包括指定文件的新变化\n```\n``` bash\ngit push origin master  -- 把本地的 commit(提交) push 到远程服务器上， origin 也就是之前 git remote add origin 那个命令里面的 origin，origin 替代了服务器仓库地址：git@github.com:zhoulujun/yourProjectName.git \n\ngit push remoteBranchName tagName提交指定tag\n\ngit push remoteBranchName --tags 提交所有tag\n```\n\n## 3. git转态查看\n``` bash\ngit status 查看状态\n```\n``` bash\ngit branch 查看本地所有分支\n\ngit branch -r查看远程所有分支\n\ngit branch -a查看本地和远程所有分支\n```\ngit tag  列出所有tag\n\ngit show tagName 查看tag信息\n\ngit log --stat 显示commit历史，以及每次commit发生变更的文件\n\n分支操作\ngit checkout branchName 切换到指定分支，并更新工作区\n\ngit merge branchName 合并指定分支到当前分支\n\ngit branch newBranchName 新建一个分支，但依然停留在当前分支\n\ngit branch --track branch remote-branch 新建一个分支，与指定的远程分支建立追踪关系\n\ngit branch -D branchName //删除目标分支\n\ngit checkout -b branchName 新建并切换至新分支\n\ngit branch -d -r branchName 删除远程分支，其中\n\ngit branch -m oldbranchname newbranchname  重命名分支 使用-M则表示强制重命名\n\n重命名远程分支\n\ngit branch -m old_name new_name 重命名分支\n\ngit checkout -b new_branch_name from_branch_name 本地建立 branch 並立即 checkout 切換過去\n\ngit push origin –delete old_name\n\n也可以如此操作\n\ngit branch -m old_branch new_branch # Rename branch locally\n\ngit push origin :old_branch # Delete the old branch\n\ngit push --set-upstream origin new_branch 或者git push -u origin new_branch  # Push the new branch, set local branch to track the new remote\n\ngit分支与主干合并操作\n在主干上合并分支||主干合并分支\ngit merge branch --squash //提交合并后的代码\n\ngit commit -m  ‘合并备注’\n\ngit push //将代码推送到远程仓库\n\n分支同步主干代码||在分支上合并主干\ngit merge master --squash //提交合并后的代码\n\ngit commit -m  ‘合并备注’ //将代码推送到远程仓库\n\ngit push //将代码推送到远程仓库\n\ngit强制覆盖本地代码\n与git远程仓库保持一致\n\ngit fetch --all\n\ngit reset --hard origin/master\n\ngit pull\n\ngit强制覆盖本地命令（单条执行）：\n\ngit fetch --all && git reset --hard origin/master && git pull\n\ngit修改远程仓库地址\n方法有三种：\n\n1.修改命令\n\ngit remote origin set-url [url]\n\n2.先删后加\n\ngit remote rm origin\n\ngit remote add origin [url]\n\n3.直接修改config文件\n\n.git文件夹，找到config，编辑，把就的项目地址替换成新的。\n\ngit 配置\ngit config --list        查看配置列表\n\ngit config --global user.name \"xxx\"   -- 配置用户名，上传本地 repository 到服务器上的时候，在 Github 上会显示这里配置的上传者信息\n\ngit config --global user.email \"xxx\"    -- 配置邮箱\n配置 sshkey ： 上传代码时使用这个 sshkey 来确认是否有上传权限\n    1. 创建本地 ssh ： ssh-keygen -t rsa -C \"Github 的注册邮箱\"\n    2. 在 Github 中添加这个 sshkey ： \n        复制  C:\\Documents and Settings\\Administrator\\.ssh\\id_rsa.pub 文件中的内容；\n        登录 Github --> Account Setting  --> SSH-KEY --> Add SSH-KEY --> 粘贴id_rsa.pub中的内容；\n    3. 验证： ssh -T git@github.com\n        出现 Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. 说明配置成功，可以连接上 Github\n\n使用 .gitignore 文件忽略指定的内容：\n\n    1. 在本地仓库根目录创建 .gitignore 文件。Win7 下不能直接创建，可以创建 \".gitignore.\" 文件，后面的标点自动被忽略；\n    2. 过滤文件和文件夹： [Tt]emp/ 过滤 Temp\\temp 文件夹； *.suo 过滤 .suo 文件；\n    3. 不过滤文件和文件夹： !*.c","slug":"# GIT基本操作","published":1,"date":"2022-06-01T06:43:20.591Z","updated":"2022-06-01T06:43:20.675Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3vevq5y0001ykuicagd8p9n","content":"<h1 id=\"GIT基本操作\"><a href=\"#GIT基本操作\" class=\"headerlink\" title=\"GIT基本操作\"></a>GIT基本操作</h1><p>下面是一些日常操作</p>\n<h2 id=\"1-建立本地仓库\"><a href=\"#1-建立本地仓库\" class=\"headerlink\" title=\"1. 建立本地仓库:\"></a>1. 建立本地仓库:</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init [project-name]  <span class=\"comment\">#创建本地仓库</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:UserName/yourProjectName.git   </span><br><span class=\"line\"><span class=\"comment\">#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@github.com:UserName/yourProjectName.git   </span><br><span class=\"line\"><span class=\"comment\">#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zhoulujun/yourProjectName.git</span><br><span class=\"line\"><span class=\"comment\">#下载github仓库</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-提交本地修改到远程仓库中：\"><a href=\"#2-提交本地修改到远程仓库中：\" class=\"headerlink\" title=\"2.提交本地修改到远程仓库中：\"></a>2.提交本地修改到远程仓库中：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add <span class=\"comment\"># 将改动添加到本地仓库中  </span></span><br><span class=\"line\"></span><br><span class=\"line\">git add [file1] [file2] ...  ||  git add [<span class=\"built_in\">dir</span>] <span class=\"comment\"># 添加指定文件||目录到暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add -A ||  git add . <span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add -p <span class=\"comment\"># 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> xxx      <span class=\"comment\"># 从本地仓库中删除指定文件</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> -r xxx   <span class=\"comment\"># 从本地仓库中删除指定文件夹</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> --cached [file]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">mv</span> [file-original] [file-renamed]  改名文件，并且将这个改名放入暂存区</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;注释&quot;</span>    -- 把本机缓存中的内容提交到本机的 HEAD 里面</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -a 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -v 提交时显示所有diff信息</span><br><span class=\"line\"></span><br><span class=\"line\">git commit --amend -m [message] 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class=\"line\"></span><br><span class=\"line\">git commit --amend [file1] [file2] ... 重做上一次commit，并包括指定文件的新变化</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master  -- 把本地的 commit(提交) push 到远程服务器上， origin 也就是之前 git remote add origin 那个命令里面的 origin，origin 替代了服务器仓库地址：git@github.com:zhoulujun/yourProjectName.git </span><br><span class=\"line\"></span><br><span class=\"line\">git push remoteBranchName tagName提交指定tag</span><br><span class=\"line\"></span><br><span class=\"line\">git push remoteBranchName --tags 提交所有tag</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-git转态查看\"><a href=\"#3-git转态查看\" class=\"headerlink\" title=\"3. git转态查看\"></a>3. git转态查看</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status 查看状态</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 查看本地所有分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -r查看远程所有分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -a查看本地和远程所有分支</span><br></pre></td></tr></table></figure>\n<p>git tag  列出所有tag</p>\n<p>git show tagName 查看tag信息</p>\n<p>git log –stat 显示commit历史，以及每次commit发生变更的文件</p>\n<p>分支操作<br>git checkout branchName 切换到指定分支，并更新工作区</p>\n<p>git merge branchName 合并指定分支到当前分支</p>\n<p>git branch newBranchName 新建一个分支，但依然停留在当前分支</p>\n<p>git branch –track branch remote-branch 新建一个分支，与指定的远程分支建立追踪关系</p>\n<p>git branch -D branchName //删除目标分支</p>\n<p>git checkout -b branchName 新建并切换至新分支</p>\n<p>git branch -d -r branchName 删除远程分支，其中</p>\n<p>git branch -m oldbranchname newbranchname  重命名分支 使用-M则表示强制重命名</p>\n<p>重命名远程分支</p>\n<p>git branch -m old_name new_name 重命名分支</p>\n<p>git checkout -b new_branch_name from_branch_name 本地建立 branch 並立即 checkout 切換過去</p>\n<p>git push origin –delete old_name</p>\n<p>也可以如此操作</p>\n<p>git branch -m old_branch new_branch # Rename branch locally</p>\n<p>git push origin :old_branch # Delete the old branch</p>\n<p>git push –set-upstream origin new_branch 或者git push -u origin new_branch  # Push the new branch, set local branch to track the new remote</p>\n<p>git分支与主干合并操作<br>在主干上合并分支||主干合并分支<br>git merge branch –squash //提交合并后的代码</p>\n<p>git commit -m  ‘合并备注’</p>\n<p>git push //将代码推送到远程仓库</p>\n<p>分支同步主干代码||在分支上合并主干<br>git merge master –squash //提交合并后的代码</p>\n<p>git commit -m  ‘合并备注’ //将代码推送到远程仓库</p>\n<p>git push //将代码推送到远程仓库</p>\n<p>git强制覆盖本地代码<br>与git远程仓库保持一致</p>\n<p>git fetch –all</p>\n<p>git reset –hard origin/master</p>\n<p>git pull</p>\n<p>git强制覆盖本地命令（单条执行）：</p>\n<p>git fetch –all &amp;&amp; git reset –hard origin/master &amp;&amp; git pull</p>\n<p>git修改远程仓库地址<br>方法有三种：</p>\n<p>1.修改命令</p>\n<p>git remote origin set-url [url]</p>\n<p>2.先删后加</p>\n<p>git remote rm origin</p>\n<p>git remote add origin [url]</p>\n<p>3.直接修改config文件</p>\n<p>.git文件夹，找到config，编辑，把就的项目地址替换成新的。</p>\n<p>git 配置<br>git config –list        查看配置列表</p>\n<p>git config –global user.name “xxx”   – 配置用户名，上传本地 repository 到服务器上的时候，在 Github 上会显示这里配置的上传者信息</p>\n<p>git config –global user.email “xxx”    – 配置邮箱<br>配置 sshkey ： 上传代码时使用这个 sshkey 来确认是否有上传权限<br>    1. 创建本地 ssh ： ssh-keygen -t rsa -C “Github 的注册邮箱”<br>    2. 在 Github 中添加这个 sshkey ：<br>        复制  C:\\Documents and Settings\\Administrator.ssh\\id_rsa.pub 文件中的内容；<br>        登录 Github –&gt; Account Setting  –&gt; SSH-KEY –&gt; Add SSH-KEY –&gt; 粘贴id_rsa.pub中的内容；<br>    3. 验证： ssh -T <a href=\"mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;\">&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;</a><br>        出现 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 说明配置成功，可以连接上 Github</p>\n<p>使用 .gitignore 文件忽略指定的内容：</p>\n<pre><code>1. 在本地仓库根目录创建 .gitignore 文件。Win7 下不能直接创建，可以创建 &quot;.gitignore.&quot; 文件，后面的标点自动被忽略；\n2. 过滤文件和文件夹： [Tt]emp/ 过滤 Temp\\temp 文件夹； *.suo 过滤 .suo 文件；\n3. 不过滤文件和文件夹： !*.c\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"GIT基本操作\"><a href=\"#GIT基本操作\" class=\"headerlink\" title=\"GIT基本操作\"></a>GIT基本操作</h1><p>下面是一些日常操作</p>\n<h2 id=\"1-建立本地仓库\"><a href=\"#1-建立本地仓库\" class=\"headerlink\" title=\"1. 建立本地仓库:\"></a>1. 建立本地仓库:</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init [project-name]  <span class=\"comment\">#创建本地仓库</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:UserName/yourProjectName.git   </span><br><span class=\"line\"><span class=\"comment\">#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@github.com:UserName/yourProjectName.git   </span><br><span class=\"line\"><span class=\"comment\">#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zhoulujun/yourProjectName.git</span><br><span class=\"line\"><span class=\"comment\">#下载github仓库</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-提交本地修改到远程仓库中：\"><a href=\"#2-提交本地修改到远程仓库中：\" class=\"headerlink\" title=\"2.提交本地修改到远程仓库中：\"></a>2.提交本地修改到远程仓库中：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add <span class=\"comment\"># 将改动添加到本地仓库中  </span></span><br><span class=\"line\"></span><br><span class=\"line\">git add [file1] [file2] ...  ||  git add [<span class=\"built_in\">dir</span>] <span class=\"comment\"># 添加指定文件||目录到暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add -A ||  git add . <span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add -p <span class=\"comment\"># 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> xxx      <span class=\"comment\"># 从本地仓库中删除指定文件</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> -r xxx   <span class=\"comment\"># 从本地仓库中删除指定文件夹</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> --cached [file]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">mv</span> [file-original] [file-renamed]  改名文件，并且将这个改名放入暂存区</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;注释&quot;</span>    -- 把本机缓存中的内容提交到本机的 HEAD 里面</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -a 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -v 提交时显示所有diff信息</span><br><span class=\"line\"></span><br><span class=\"line\">git commit --amend -m [message] 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class=\"line\"></span><br><span class=\"line\">git commit --amend [file1] [file2] ... 重做上一次commit，并包括指定文件的新变化</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master  -- 把本地的 commit(提交) push 到远程服务器上， origin 也就是之前 git remote add origin 那个命令里面的 origin，origin 替代了服务器仓库地址：git@github.com:zhoulujun/yourProjectName.git </span><br><span class=\"line\"></span><br><span class=\"line\">git push remoteBranchName tagName提交指定tag</span><br><span class=\"line\"></span><br><span class=\"line\">git push remoteBranchName --tags 提交所有tag</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-git转态查看\"><a href=\"#3-git转态查看\" class=\"headerlink\" title=\"3. git转态查看\"></a>3. git转态查看</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status 查看状态</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 查看本地所有分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -r查看远程所有分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -a查看本地和远程所有分支</span><br></pre></td></tr></table></figure>\n<p>git tag  列出所有tag</p>\n<p>git show tagName 查看tag信息</p>\n<p>git log –stat 显示commit历史，以及每次commit发生变更的文件</p>\n<p>分支操作<br>git checkout branchName 切换到指定分支，并更新工作区</p>\n<p>git merge branchName 合并指定分支到当前分支</p>\n<p>git branch newBranchName 新建一个分支，但依然停留在当前分支</p>\n<p>git branch –track branch remote-branch 新建一个分支，与指定的远程分支建立追踪关系</p>\n<p>git branch -D branchName //删除目标分支</p>\n<p>git checkout -b branchName 新建并切换至新分支</p>\n<p>git branch -d -r branchName 删除远程分支，其中</p>\n<p>git branch -m oldbranchname newbranchname  重命名分支 使用-M则表示强制重命名</p>\n<p>重命名远程分支</p>\n<p>git branch -m old_name new_name 重命名分支</p>\n<p>git checkout -b new_branch_name from_branch_name 本地建立 branch 並立即 checkout 切換過去</p>\n<p>git push origin –delete old_name</p>\n<p>也可以如此操作</p>\n<p>git branch -m old_branch new_branch # Rename branch locally</p>\n<p>git push origin :old_branch # Delete the old branch</p>\n<p>git push –set-upstream origin new_branch 或者git push -u origin new_branch  # Push the new branch, set local branch to track the new remote</p>\n<p>git分支与主干合并操作<br>在主干上合并分支||主干合并分支<br>git merge branch –squash //提交合并后的代码</p>\n<p>git commit -m  ‘合并备注’</p>\n<p>git push //将代码推送到远程仓库</p>\n<p>分支同步主干代码||在分支上合并主干<br>git merge master –squash //提交合并后的代码</p>\n<p>git commit -m  ‘合并备注’ //将代码推送到远程仓库</p>\n<p>git push //将代码推送到远程仓库</p>\n<p>git强制覆盖本地代码<br>与git远程仓库保持一致</p>\n<p>git fetch –all</p>\n<p>git reset –hard origin/master</p>\n<p>git pull</p>\n<p>git强制覆盖本地命令（单条执行）：</p>\n<p>git fetch –all &amp;&amp; git reset –hard origin/master &amp;&amp; git pull</p>\n<p>git修改远程仓库地址<br>方法有三种：</p>\n<p>1.修改命令</p>\n<p>git remote origin set-url [url]</p>\n<p>2.先删后加</p>\n<p>git remote rm origin</p>\n<p>git remote add origin [url]</p>\n<p>3.直接修改config文件</p>\n<p>.git文件夹，找到config，编辑，把就的项目地址替换成新的。</p>\n<p>git 配置<br>git config –list        查看配置列表</p>\n<p>git config –global user.name “xxx”   – 配置用户名，上传本地 repository 到服务器上的时候，在 Github 上会显示这里配置的上传者信息</p>\n<p>git config –global user.email “xxx”    – 配置邮箱<br>配置 sshkey ： 上传代码时使用这个 sshkey 来确认是否有上传权限<br>    1. 创建本地 ssh ： ssh-keygen -t rsa -C “Github 的注册邮箱”<br>    2. 在 Github 中添加这个 sshkey ：<br>        复制  C:\\Documents and Settings\\Administrator.ssh\\id_rsa.pub 文件中的内容；<br>        登录 Github –&gt; Account Setting  –&gt; SSH-KEY –&gt; Add SSH-KEY –&gt; 粘贴id_rsa.pub中的内容；<br>    3. 验证： ssh -T <a href=\"mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;\">&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;</a><br>        出现 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 说明配置成功，可以连接上 Github</p>\n<p>使用 .gitignore 文件忽略指定的内容：</p>\n<pre><code>1. 在本地仓库根目录创建 .gitignore 文件。Win7 下不能直接创建，可以创建 &quot;.gitignore.&quot; 文件，后面的标点自动被忽略；\n2. 过滤文件和文件夹： [Tt]emp/ 过滤 Temp\\temp 文件夹； *.suo 过滤 .suo 文件；\n3. 不过滤文件和文件夹： !*.c\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}
>>>>>>> origin/code
