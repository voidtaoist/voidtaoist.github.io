{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/head.jpg","path":"images/head.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"1eb2b2d7ff8a4505d9911f33114a83abf51377fd","modified":1654090533000},{"_id":"source/_posts/Git基本操作.md","hash":"eb083937e1d372583fdfeb9aa16351f5c8027050","modified":1654100395702},{"_id":"source/_posts/安装CUDA.md","hash":"cb05130f96287c4b00cd8321096a7a1b388b2163","modified":1654100556984},{"_id":"source/tags/index.md","hash":"3cc66c0c26e5e4e0bdea1d2c9942d97998244bdb","modified":1654150129641},{"_id":"source/categories/index.md","hash":"debcb17825b4cde94f476495016fd5d9389cbc58","modified":1654150117997},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1654090533000},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1654090533000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1654090533000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1654090533000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1654090533000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1654090533000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1654090533000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1654090533000},{"_id":"themes/next/_config.yml","hash":"2d3eab096868cc0f66f02089e56204541d30e9b0","modified":1654151040336},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1654090533000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1654090533000},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1654090533000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1654090533000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1654090533000},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1654090533000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1654090533000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1654090533000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1654090533000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1654090533000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1654090533000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1654090533000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1654090533000},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1654090533000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1654090533000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1654090533000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1654090533000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1654090533000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1654090533000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1654090533000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1654090533000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1654090533000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1654090533000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1654090533000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1654090533000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1654090533000},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1654090533000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1654090533000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1654090533000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1654090533000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1654090533000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1654090533000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1654090533000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1654090533000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1654090533000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1654090533000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1654090533000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1654090533000},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1654090533000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1654090533000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1654090533000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1654090533000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1654090533000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1654090533000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1654090533000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1654090533000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1654090533000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1654090533000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1654090533000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1654090533000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1654090533000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1654090533000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1654090533000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1654090533000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1654090533000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1654090533000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1654090533000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1654090533000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1654090533000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1654090533000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1654090533000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1654090533000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1654090533000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1654090533000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1654090533000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1654090533000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1654090533000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1654090533000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1654090533000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1654090533000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"c4ec5822d644ddcedf2401837e6f6e6d3b63fbcd","modified":1654090533000},{"_id":"themes/next/layout/_macro/post.swig","hash":"71e4dc5a56cbc403d9785526f7719d824f4c8911","modified":1654090533000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1654090533000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1654090533000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1654090533000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1654090533000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1654090533000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1654090533000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"af2d688f688923080aaf8f20be33cfda629797ea","modified":1654090533000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1654090533000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1654090533000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1654090533000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1654090533000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1654090533000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1654090533000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1654090533000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1654090533000},{"_id":"themes/next/source/css/_colors.styl","hash":"19c836f367977fb712b9868f3281ff5d757a8d5c","modified":1654090533000},{"_id":"themes/next/source/css/_mixins.styl","hash":"b79ff3debd5709397b122292fc7e551ae9d40782","modified":1654090533000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1654090533000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1654090533000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1654090533000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1654090533000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1654090533000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1654090533000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1654090533000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1654090533000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1654090533000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1654090533000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1654090533000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1654090533000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1654090533000},{"_id":"themes/next/source/images/head.jpg","hash":"620f13b8feb0c9cab2cbb45337464d9cd37e8604","modified":1654098535250},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1654090533000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1654090533000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1654090533000},{"_id":"themes/next/source/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1654090533000},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1654090533000},{"_id":"themes/next/source/js/local-search.js","hash":"b42bd1c883ce91db8632d96e0f0e062cb6b73adc","modified":1654090533000},{"_id":"themes/next/source/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1654090533000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1654090533000},{"_id":"themes/next/source/js/utils.js","hash":"95c5d37aa06521675afcf8619cfc5dbba3d2e18a","modified":1654090533000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1654090533000},{"_id":"themes/next/scripts/events/index.js","hash":"bf5e93f9209d111a014a7a6a17e86c05be552d13","modified":1654090533000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1654090533000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1654090533000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1654090533000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1654090533000},{"_id":"themes/next/scripts/filters/post.js","hash":"d86849559ae54a4098aef4e2ab9dc8f99a1d186c","modified":1654090533000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"22d77bd511fc7c1bbd12339d65004ed5bfb0713c","modified":1654090533000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1654090533000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1654090533000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1654090533000},{"_id":"themes/next/scripts/tags/button.js","hash":"946dd7beede408d1f090d5e9774d74763828b97c","modified":1654090533000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1654090533000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"0f133f27b61e8351cfd0959ba8a1b8551a9a8cc6","modified":1654090533000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1654090533000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1654090533000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1654090533000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1654090533000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1654090533000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1654090533000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1654090533000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1654090533000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1654090533000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1654090533000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1654090533000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1654090533000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1654090533000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1654090533000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1654090533000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1654090533000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1654090533000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1654090533000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1654090533000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1654090533000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1654090533000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1654090533000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1654090533000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1654090533000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1654090533000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1654090533000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1654090533000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1654090533000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1654090533000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1654090533000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1654090533000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1654090533000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1654090533000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"1ea12d4b9490d9065ebf1b8739b90ce5defd6398","modified":1654090533000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1654090533000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1654090533000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"12aeb9ee0d1d49d347f82a91e6bab568e1b59037","modified":1654090533000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"958e097790551c9520426a1233add03515034f35","modified":1654090533000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1654090533000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1654090533000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1654090533000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1654090533000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"12cd9adb0c33adc484201f9e8a4e64ccf3011bae","modified":1654090533000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1654090533000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1654090533000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1654090533000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1654090533000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1654090533000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1654090533000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"ec20ff43845723e0ac2a245047c7a7e5aead6e88","modified":1654090533000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1654090533000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1654090533000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1654090533000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1654090533000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1654090533000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1654090533000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1654090533000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1654090533000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"799fdf4f258a51d45d1e2b02fb59b337e46b5b3c","modified":1654090533000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dae390efcb5da9c021ad7f25fe2d39ff36938cc6","modified":1654090533000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1654090533000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1654090533000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1654090533000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1654090533000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1654090533000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1654090533000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1654090533000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1654090533000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1654090533000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1654090533000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1654090533000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1654090533000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1654090533000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1654090533000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1654090533000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"19cbd24880d0fbbd4d5698cd54da598f03b942da","modified":1654090533000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1654090533000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1654090533000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1654090533000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6a72b5928cdab9526a288177991e4b2aedd028cf","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"220da37051ed5dac9cf7bd126451f6aba4f94d21","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"5e644b1303ab6dcd1b65ee0fd6b91309b04ce64d","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"ccb71d732b12acd02ac26ed6bbda4861d027857d","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e4f958677a75de87ee1caf7e22ba46a0602f22dd","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"82025c3ad7af12e532e2e81be98deb0a74ff23ac","modified":1654090533000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1654090533000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1654090533000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1654090533000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"555762730f1f31451113e8fdc84ec438ea738d90","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1654090533000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c1daeb60c23945f745703ac2c3f4bf99d0ea3d95","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"89f76380091f1be49936c69bac02e984dae5ff87","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"66211794e4ed47e779ca81150cef588e0b4f2fc5","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"796eb941ba0ca03fd5ca6d15a1f6a56afd9aa174","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1654090533000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"9b3cce30c58e57b59e45d3f668a71a4129d3a8e4","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1654090533000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1654090533000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1654090533000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1654090533000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1654090533000},{"_id":"public/search.xml","hash":"071e1fb6eef578badf2e78a8a9f2dccfd2d04acf","modified":1654107408975},{"_id":"public/tags/index.html","hash":"64079194079453284af8e039a3329ef0eaae3ea7","modified":1654151076848},{"_id":"public/categories/index.html","hash":"5c221645794f385486a567ea43e609a8a98f218e","modified":1654151076848},{"_id":"public/archives/index.html","hash":"920e57c62c55a97cdce8a2f7cf9a8dfb885116b7","modified":1654151076848},{"_id":"public/archives/2022/index.html","hash":"8bc0dadbc1392177b79f4a16f5869546516f5f6e","modified":1654151076848},{"_id":"public/archives/2022/06/index.html","hash":"001e9abadbeb443d09a34bbaff433a870e73256f","modified":1654151076848},{"_id":"public/tags/Git/index.html","hash":"bfac76d42756b78cb29e55fa8a3c96c6f5a6aef7","modified":1654151076848},{"_id":"public/tags/CUDA/index.html","hash":"ab4f74ee2887accf3a15c41f12ca785c4bb1b056","modified":1654151076848},{"_id":"public/void/安装CUDA/index.html","hash":"0f604cd4bfd92d175fbe5401efb54fe2efca0f08","modified":1654151076848},{"_id":"public/void/Git基本操作/index.html","hash":"327e35f1011fc617b9da07ec59b8b72b9d823e7a","modified":1654151076848},{"_id":"public/index.html","hash":"6b546c10eae73ae9df44bd29a0185ba830763558","modified":1654151076848},{"_id":"public/CNAME","hash":"1eb2b2d7ff8a4505d9911f33114a83abf51377fd","modified":1654107408975},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1654107408975},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1654107408975},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1654107408975},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1654107408975},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1654107408975},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1654107408975},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1654107408975},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1654107408975},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1654107408975},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1654107408975},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1654107408975},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1654107408975},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1654107408975},{"_id":"public/images/head.jpg","hash":"620f13b8feb0c9cab2cbb45337464d9cd37e8604","modified":1654107408975},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1654107408975},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1654107408975},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1654107408975},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1654107408975},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1654107408975},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1654107408975},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1654107408975},{"_id":"public/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1654107408975},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1654107408975},{"_id":"public/js/utils.js","hash":"95c5d37aa06521675afcf8619cfc5dbba3d2e18a","modified":1654107408975},{"_id":"public/js/local-search.js","hash":"b42bd1c883ce91db8632d96e0f0e062cb6b73adc","modified":1654107408975},{"_id":"public/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1654107408975},{"_id":"public/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1654107408975},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1654107408975},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1654107408975},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1654107408975},{"_id":"public/css/main.css","hash":"d69174f06c426bd17a20af736404789b2fb71a01","modified":1654107408975},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1654107408975},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1654107408975},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1654107408975},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1654107408975},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1654107408975}],"Category":[],"Data":[],"Page":[{"title":"标签","date":"2022-06-01T16:14:11.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-06-02 00:14:11\ntype: tags\n---\n","updated":"2022-06-02T06:08:49.641Z","path":"tags/index.html","_id":"cl3vwudjf00006wvkhd00h39k","comments":1,"layout":"page","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"分类","date":"2022-06-01T16:14:37.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-06-02 00:14:37\ntype: categories\n---\n","updated":"2022-06-02T06:08:37.997Z","path":"categories/index.html","_id":"cl3vwudjl00026wvk53kdgmf4","comments":1,"layout":"page","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"Git使用指南","comment":true,"my":"void","_content":"# GIT基本操作\n下面是一些日常操作\n\n## 1. 建立本地仓库:\n\n```bash\ngit init [project-name]  #创建本地仓库\n```\n\n\n```bash\ngit remote add origin git@github.com:UserName/yourProjectName.git   \n#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址\n\ngit remote add origin git@github.com:UserName/yourProjectName.git   \n#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址\n\ngit clone https://github.com/zhoulujun/yourProjectName.git\n#下载github仓库\n```\n\n## 2.提交本地修改到远程仓库中：\n``` bash\ngit add # 将改动添加到本地仓库中  \n\ngit add [file1] [file2] ...  ||  git add [dir] # 添加指定文件||目录到暂存区\n\ngit add -A ||  git add . # 添加当前目录的所有文件到暂存区\n\ngit add -p # 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交\n```\n\n``` bash\ngit rm xxx      # 从本地仓库中删除指定文件\ngit rm -r xxx   # 从本地仓库中删除指定文件夹\n\ngit rm --cached [file]\n```\n``` bash\ngit mv [file-original] [file-renamed]  改名文件，并且将这个改名放入暂存区\n```\n``` bash\ngit commit -m \"注释\"    -- 把本机缓存中的内容提交到本机的 HEAD 里面\n\ngit commit -a 提交工作区自上次commit之后的变化，直接到仓库区\n\ngit commit -v 提交时显示所有diff信息\n\ngit commit --amend -m [message] 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\ngit commit --amend [file1] [file2] ... 重做上一次commit，并包括指定文件的新变化\n```\n``` bash\ngit push origin master  -- 把本地的 commit(提交) push 到远程服务器上， origin 也就是之前 git remote add origin 那个命令里面的 origin，origin 替代了服务器仓库地址：git@github.com:zhoulujun/yourProjectName.git \n\ngit push remoteBranchName tagName提交指定tag\n\ngit push remoteBranchName --tags 提交所有tag\n```\n\n## 3. git转态查看\n``` bash\ngit status 查看状态\n```\n``` bash\ngit branch 查看本地所有分支\n\ngit branch -r查看远程所有分支\n\ngit branch -a查看本地和远程所有分支\n```\ngit tag  列出所有tag\n\ngit show tagName 查看tag信息\n\ngit log --stat 显示commit历史，以及每次commit发生变更的文件\n\n分支操作\ngit checkout branchName 切换到指定分支，并更新工作区\n\ngit merge branchName 合并指定分支到当前分支\n\ngit branch newBranchName 新建一个分支，但依然停留在当前分支\n\ngit branch --track branch remote-branch 新建一个分支，与指定的远程分支建立追踪关系\n\ngit branch -D branchName //删除目标分支\n\ngit checkout -b branchName 新建并切换至新分支\n\ngit branch -d -r branchName 删除远程分支，其中\n\ngit branch -m oldbranchname newbranchname  重命名分支 使用-M则表示强制重命名\n\n重命名远程分支\n\ngit branch -m old_name new_name 重命名分支\n\ngit checkout -b new_branch_name from_branch_name 本地建立 branch 並立即 checkout 切換過去\n\ngit push origin –delete old_name\n\n也可以如此操作\n\ngit branch -m old_branch new_branch # Rename branch locally\n\ngit push origin :old_branch # Delete the old branch\n\ngit push --set-upstream origin new_branch 或者git push -u origin new_branch  # Push the new branch, set local branch to track the new remote\n\ngit分支与主干合并操作\n在主干上合并分支||主干合并分支\ngit merge branch --squash //提交合并后的代码\n\ngit commit -m  ‘合并备注’\n\ngit push //将代码推送到远程仓库\n\n分支同步主干代码||在分支上合并主干\ngit merge master --squash //提交合并后的代码\n\ngit commit -m  ‘合并备注’ //将代码推送到远程仓库\n\ngit push //将代码推送到远程仓库\n\ngit强制覆盖本地代码\n与git远程仓库保持一致\n\ngit fetch --all\n\ngit reset --hard origin/master\n\ngit pull\n\ngit强制覆盖本地命令（单条执行）：\n\ngit fetch --all && git reset --hard origin/master && git pull\n\ngit修改远程仓库地址\n方法有三种：\n\n1.修改命令\n\ngit remote origin set-url [url]\n\n2.先删后加\n\ngit remote rm origin\n\ngit remote add origin [url]\n\n3.直接修改config文件\n\n.git文件夹，找到config，编辑，把就的项目地址替换成新的。\n\ngit 配置\ngit config --list        查看配置列表\n\ngit config --global user.name \"xxx\"   -- 配置用户名，上传本地 repository 到服务器上的时候，在 Github 上会显示这里配置的上传者信息\n\ngit config --global user.email \"xxx\"    -- 配置邮箱\n配置 sshkey ： 上传代码时使用这个 sshkey 来确认是否有上传权限\n    1. 创建本地 ssh ： ssh-keygen -t rsa -C \"Github 的注册邮箱\"\n    2. 在 Github 中添加这个 sshkey ： \n        复制  C:\\Documents and Settings\\Administrator\\.ssh\\id_rsa.pub 文件中的内容；\n        登录 Github --> Account Setting  --> SSH-KEY --> Add SSH-KEY --> 粘贴id_rsa.pub中的内容；\n    3. 验证： ssh -T git@github.com\n        出现 Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. 说明配置成功，可以连接上 Github\n\n使用 .gitignore 文件忽略指定的内容：\n\n    1. 在本地仓库根目录创建 .gitignore 文件。Win7 下不能直接创建，可以创建 \".gitignore.\" 文件，后面的标点自动被忽略；\n    2. 过滤文件和文件夹： [Tt]emp/ 过滤 Temp\\temp 文件夹； *.suo 过滤 .suo 文件；\n    3. 不过滤文件和文件夹： !*.c","source":"_posts/Git基本操作.md","raw":"---\ntitle: Git使用指南\ncomment: true\ntags: Git\nmy: void\n---\n# GIT基本操作\n下面是一些日常操作\n\n## 1. 建立本地仓库:\n\n```bash\ngit init [project-name]  #创建本地仓库\n```\n\n\n```bash\ngit remote add origin git@github.com:UserName/yourProjectName.git   \n#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址\n\ngit remote add origin git@github.com:UserName/yourProjectName.git   \n#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址\n\ngit clone https://github.com/zhoulujun/yourProjectName.git\n#下载github仓库\n```\n\n## 2.提交本地修改到远程仓库中：\n``` bash\ngit add # 将改动添加到本地仓库中  \n\ngit add [file1] [file2] ...  ||  git add [dir] # 添加指定文件||目录到暂存区\n\ngit add -A ||  git add . # 添加当前目录的所有文件到暂存区\n\ngit add -p # 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交\n```\n\n``` bash\ngit rm xxx      # 从本地仓库中删除指定文件\ngit rm -r xxx   # 从本地仓库中删除指定文件夹\n\ngit rm --cached [file]\n```\n``` bash\ngit mv [file-original] [file-renamed]  改名文件，并且将这个改名放入暂存区\n```\n``` bash\ngit commit -m \"注释\"    -- 把本机缓存中的内容提交到本机的 HEAD 里面\n\ngit commit -a 提交工作区自上次commit之后的变化，直接到仓库区\n\ngit commit -v 提交时显示所有diff信息\n\ngit commit --amend -m [message] 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\ngit commit --amend [file1] [file2] ... 重做上一次commit，并包括指定文件的新变化\n```\n``` bash\ngit push origin master  -- 把本地的 commit(提交) push 到远程服务器上， origin 也就是之前 git remote add origin 那个命令里面的 origin，origin 替代了服务器仓库地址：git@github.com:zhoulujun/yourProjectName.git \n\ngit push remoteBranchName tagName提交指定tag\n\ngit push remoteBranchName --tags 提交所有tag\n```\n\n## 3. git转态查看\n``` bash\ngit status 查看状态\n```\n``` bash\ngit branch 查看本地所有分支\n\ngit branch -r查看远程所有分支\n\ngit branch -a查看本地和远程所有分支\n```\ngit tag  列出所有tag\n\ngit show tagName 查看tag信息\n\ngit log --stat 显示commit历史，以及每次commit发生变更的文件\n\n分支操作\ngit checkout branchName 切换到指定分支，并更新工作区\n\ngit merge branchName 合并指定分支到当前分支\n\ngit branch newBranchName 新建一个分支，但依然停留在当前分支\n\ngit branch --track branch remote-branch 新建一个分支，与指定的远程分支建立追踪关系\n\ngit branch -D branchName //删除目标分支\n\ngit checkout -b branchName 新建并切换至新分支\n\ngit branch -d -r branchName 删除远程分支，其中\n\ngit branch -m oldbranchname newbranchname  重命名分支 使用-M则表示强制重命名\n\n重命名远程分支\n\ngit branch -m old_name new_name 重命名分支\n\ngit checkout -b new_branch_name from_branch_name 本地建立 branch 並立即 checkout 切換過去\n\ngit push origin –delete old_name\n\n也可以如此操作\n\ngit branch -m old_branch new_branch # Rename branch locally\n\ngit push origin :old_branch # Delete the old branch\n\ngit push --set-upstream origin new_branch 或者git push -u origin new_branch  # Push the new branch, set local branch to track the new remote\n\ngit分支与主干合并操作\n在主干上合并分支||主干合并分支\ngit merge branch --squash //提交合并后的代码\n\ngit commit -m  ‘合并备注’\n\ngit push //将代码推送到远程仓库\n\n分支同步主干代码||在分支上合并主干\ngit merge master --squash //提交合并后的代码\n\ngit commit -m  ‘合并备注’ //将代码推送到远程仓库\n\ngit push //将代码推送到远程仓库\n\ngit强制覆盖本地代码\n与git远程仓库保持一致\n\ngit fetch --all\n\ngit reset --hard origin/master\n\ngit pull\n\ngit强制覆盖本地命令（单条执行）：\n\ngit fetch --all && git reset --hard origin/master && git pull\n\ngit修改远程仓库地址\n方法有三种：\n\n1.修改命令\n\ngit remote origin set-url [url]\n\n2.先删后加\n\ngit remote rm origin\n\ngit remote add origin [url]\n\n3.直接修改config文件\n\n.git文件夹，找到config，编辑，把就的项目地址替换成新的。\n\ngit 配置\ngit config --list        查看配置列表\n\ngit config --global user.name \"xxx\"   -- 配置用户名，上传本地 repository 到服务器上的时候，在 Github 上会显示这里配置的上传者信息\n\ngit config --global user.email \"xxx\"    -- 配置邮箱\n配置 sshkey ： 上传代码时使用这个 sshkey 来确认是否有上传权限\n    1. 创建本地 ssh ： ssh-keygen -t rsa -C \"Github 的注册邮箱\"\n    2. 在 Github 中添加这个 sshkey ： \n        复制  C:\\Documents and Settings\\Administrator\\.ssh\\id_rsa.pub 文件中的内容；\n        登录 Github --> Account Setting  --> SSH-KEY --> Add SSH-KEY --> 粘贴id_rsa.pub中的内容；\n    3. 验证： ssh -T git@github.com\n        出现 Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. 说明配置成功，可以连接上 Github\n\n使用 .gitignore 文件忽略指定的内容：\n\n    1. 在本地仓库根目录创建 .gitignore 文件。Win7 下不能直接创建，可以创建 \".gitignore.\" 文件，后面的标点自动被忽略；\n    2. 过滤文件和文件夹： [Tt]emp/ 过滤 Temp\\temp 文件夹； *.suo 过滤 .suo 文件；\n    3. 不过滤文件和文件夹： !*.c","slug":"Git基本操作","published":1,"date":"2022-06-01T15:26:34.328Z","updated":"2022-06-01T16:19:55.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3vwudji00016wvk76025jdp","content":"<h1 id=\"GIT基本操作\"><a href=\"#GIT基本操作\" class=\"headerlink\" title=\"GIT基本操作\"></a>GIT基本操作</h1><p>下面是一些日常操作</p>\n<h2 id=\"1-建立本地仓库\"><a href=\"#1-建立本地仓库\" class=\"headerlink\" title=\"1. 建立本地仓库:\"></a>1. 建立本地仓库:</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init [project-name]  <span class=\"comment\">#创建本地仓库</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:UserName/yourProjectName.git   </span><br><span class=\"line\"><span class=\"comment\">#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@github.com:UserName/yourProjectName.git   </span><br><span class=\"line\"><span class=\"comment\">#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zhoulujun/yourProjectName.git</span><br><span class=\"line\"><span class=\"comment\">#下载github仓库</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-提交本地修改到远程仓库中：\"><a href=\"#2-提交本地修改到远程仓库中：\" class=\"headerlink\" title=\"2.提交本地修改到远程仓库中：\"></a>2.提交本地修改到远程仓库中：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add <span class=\"comment\"># 将改动添加到本地仓库中  </span></span><br><span class=\"line\"></span><br><span class=\"line\">git add [file1] [file2] ...  ||  git add [<span class=\"built_in\">dir</span>] <span class=\"comment\"># 添加指定文件||目录到暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add -A ||  git add . <span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add -p <span class=\"comment\"># 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> xxx      <span class=\"comment\"># 从本地仓库中删除指定文件</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> -r xxx   <span class=\"comment\"># 从本地仓库中删除指定文件夹</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> --cached [file]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">mv</span> [file-original] [file-renamed]  改名文件，并且将这个改名放入暂存区</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;注释&quot;</span>    -- 把本机缓存中的内容提交到本机的 HEAD 里面</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -a 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -v 提交时显示所有diff信息</span><br><span class=\"line\"></span><br><span class=\"line\">git commit --amend -m [message] 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class=\"line\"></span><br><span class=\"line\">git commit --amend [file1] [file2] ... 重做上一次commit，并包括指定文件的新变化</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master  -- 把本地的 commit(提交) push 到远程服务器上， origin 也就是之前 git remote add origin 那个命令里面的 origin，origin 替代了服务器仓库地址：git@github.com:zhoulujun/yourProjectName.git </span><br><span class=\"line\"></span><br><span class=\"line\">git push remoteBranchName tagName提交指定tag</span><br><span class=\"line\"></span><br><span class=\"line\">git push remoteBranchName --tags 提交所有tag</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-git转态查看\"><a href=\"#3-git转态查看\" class=\"headerlink\" title=\"3. git转态查看\"></a>3. git转态查看</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status 查看状态</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 查看本地所有分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -r查看远程所有分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -a查看本地和远程所有分支</span><br></pre></td></tr></table></figure>\n<p>git tag  列出所有tag</p>\n<p>git show tagName 查看tag信息</p>\n<p>git log –stat 显示commit历史，以及每次commit发生变更的文件</p>\n<p>分支操作<br>git checkout branchName 切换到指定分支，并更新工作区</p>\n<p>git merge branchName 合并指定分支到当前分支</p>\n<p>git branch newBranchName 新建一个分支，但依然停留在当前分支</p>\n<p>git branch –track branch remote-branch 新建一个分支，与指定的远程分支建立追踪关系</p>\n<p>git branch -D branchName //删除目标分支</p>\n<p>git checkout -b branchName 新建并切换至新分支</p>\n<p>git branch -d -r branchName 删除远程分支，其中</p>\n<p>git branch -m oldbranchname newbranchname  重命名分支 使用-M则表示强制重命名</p>\n<p>重命名远程分支</p>\n<p>git branch -m old_name new_name 重命名分支</p>\n<p>git checkout -b new_branch_name from_branch_name 本地建立 branch 並立即 checkout 切換過去</p>\n<p>git push origin –delete old_name</p>\n<p>也可以如此操作</p>\n<p>git branch -m old_branch new_branch # Rename branch locally</p>\n<p>git push origin :old_branch # Delete the old branch</p>\n<p>git push –set-upstream origin new_branch 或者git push -u origin new_branch  # Push the new branch, set local branch to track the new remote</p>\n<p>git分支与主干合并操作<br>在主干上合并分支||主干合并分支<br>git merge branch –squash //提交合并后的代码</p>\n<p>git commit -m  ‘合并备注’</p>\n<p>git push //将代码推送到远程仓库</p>\n<p>分支同步主干代码||在分支上合并主干<br>git merge master –squash //提交合并后的代码</p>\n<p>git commit -m  ‘合并备注’ //将代码推送到远程仓库</p>\n<p>git push //将代码推送到远程仓库</p>\n<p>git强制覆盖本地代码<br>与git远程仓库保持一致</p>\n<p>git fetch –all</p>\n<p>git reset –hard origin/master</p>\n<p>git pull</p>\n<p>git强制覆盖本地命令（单条执行）：</p>\n<p>git fetch –all &amp;&amp; git reset –hard origin/master &amp;&amp; git pull</p>\n<p>git修改远程仓库地址<br>方法有三种：</p>\n<p>1.修改命令</p>\n<p>git remote origin set-url [url]</p>\n<p>2.先删后加</p>\n<p>git remote rm origin</p>\n<p>git remote add origin [url]</p>\n<p>3.直接修改config文件</p>\n<p>.git文件夹，找到config，编辑，把就的项目地址替换成新的。</p>\n<p>git 配置<br>git config –list        查看配置列表</p>\n<p>git config –global user.name “xxx”   – 配置用户名，上传本地 repository 到服务器上的时候，在 Github 上会显示这里配置的上传者信息</p>\n<p>git config –global user.email “xxx”    – 配置邮箱<br>配置 sshkey ： 上传代码时使用这个 sshkey 来确认是否有上传权限<br>    1. 创建本地 ssh ： ssh-keygen -t rsa -C “Github 的注册邮箱”<br>    2. 在 Github 中添加这个 sshkey ：<br>        复制  C:\\Documents and Settings\\Administrator.ssh\\id_rsa.pub 文件中的内容；<br>        登录 Github –&gt; Account Setting  –&gt; SSH-KEY –&gt; Add SSH-KEY –&gt; 粘贴id_rsa.pub中的内容；<br>    3. 验证： ssh -T <a href=\"mailto:&#x67;&#x69;&#116;&#64;&#103;&#x69;&#116;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#x6d;\">&#x67;&#x69;&#116;&#64;&#103;&#x69;&#116;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#x6d;</a><br>        出现 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 说明配置成功，可以连接上 Github</p>\n<p>使用 .gitignore 文件忽略指定的内容：</p>\n<pre><code>1. 在本地仓库根目录创建 .gitignore 文件。Win7 下不能直接创建，可以创建 &quot;.gitignore.&quot; 文件，后面的标点自动被忽略；\n2. 过滤文件和文件夹： [Tt]emp/ 过滤 Temp\\temp 文件夹； *.suo 过滤 .suo 文件；\n3. 不过滤文件和文件夹： !*.c\n</code></pre>\n","site":{"data":{}},"length":3149,"excerpt":"","more":"<h1 id=\"GIT基本操作\"><a href=\"#GIT基本操作\" class=\"headerlink\" title=\"GIT基本操作\"></a>GIT基本操作</h1><p>下面是一些日常操作</p>\n<h2 id=\"1-建立本地仓库\"><a href=\"#1-建立本地仓库\" class=\"headerlink\" title=\"1. 建立本地仓库:\"></a>1. 建立本地仓库:</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init [project-name]  <span class=\"comment\">#创建本地仓库</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:UserName/yourProjectName.git   </span><br><span class=\"line\"><span class=\"comment\">#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@github.com:UserName/yourProjectName.git   </span><br><span class=\"line\"><span class=\"comment\">#把本地仓库和远程仓库关联起来， 如果不执行这个命令的话，每次 push 的时候都需要指定远程服务器的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zhoulujun/yourProjectName.git</span><br><span class=\"line\"><span class=\"comment\">#下载github仓库</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-提交本地修改到远程仓库中：\"><a href=\"#2-提交本地修改到远程仓库中：\" class=\"headerlink\" title=\"2.提交本地修改到远程仓库中：\"></a>2.提交本地修改到远程仓库中：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add <span class=\"comment\"># 将改动添加到本地仓库中  </span></span><br><span class=\"line\"></span><br><span class=\"line\">git add [file1] [file2] ...  ||  git add [<span class=\"built_in\">dir</span>] <span class=\"comment\"># 添加指定文件||目录到暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add -A ||  git add . <span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add -p <span class=\"comment\"># 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> xxx      <span class=\"comment\"># 从本地仓库中删除指定文件</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> -r xxx   <span class=\"comment\"># 从本地仓库中删除指定文件夹</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> --cached [file]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">mv</span> [file-original] [file-renamed]  改名文件，并且将这个改名放入暂存区</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;注释&quot;</span>    -- 把本机缓存中的内容提交到本机的 HEAD 里面</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -a 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -v 提交时显示所有diff信息</span><br><span class=\"line\"></span><br><span class=\"line\">git commit --amend -m [message] 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class=\"line\"></span><br><span class=\"line\">git commit --amend [file1] [file2] ... 重做上一次commit，并包括指定文件的新变化</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master  -- 把本地的 commit(提交) push 到远程服务器上， origin 也就是之前 git remote add origin 那个命令里面的 origin，origin 替代了服务器仓库地址：git@github.com:zhoulujun/yourProjectName.git </span><br><span class=\"line\"></span><br><span class=\"line\">git push remoteBranchName tagName提交指定tag</span><br><span class=\"line\"></span><br><span class=\"line\">git push remoteBranchName --tags 提交所有tag</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-git转态查看\"><a href=\"#3-git转态查看\" class=\"headerlink\" title=\"3. git转态查看\"></a>3. git转态查看</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status 查看状态</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 查看本地所有分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -r查看远程所有分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -a查看本地和远程所有分支</span><br></pre></td></tr></table></figure>\n<p>git tag  列出所有tag</p>\n<p>git show tagName 查看tag信息</p>\n<p>git log –stat 显示commit历史，以及每次commit发生变更的文件</p>\n<p>分支操作<br>git checkout branchName 切换到指定分支，并更新工作区</p>\n<p>git merge branchName 合并指定分支到当前分支</p>\n<p>git branch newBranchName 新建一个分支，但依然停留在当前分支</p>\n<p>git branch –track branch remote-branch 新建一个分支，与指定的远程分支建立追踪关系</p>\n<p>git branch -D branchName //删除目标分支</p>\n<p>git checkout -b branchName 新建并切换至新分支</p>\n<p>git branch -d -r branchName 删除远程分支，其中</p>\n<p>git branch -m oldbranchname newbranchname  重命名分支 使用-M则表示强制重命名</p>\n<p>重命名远程分支</p>\n<p>git branch -m old_name new_name 重命名分支</p>\n<p>git checkout -b new_branch_name from_branch_name 本地建立 branch 並立即 checkout 切換過去</p>\n<p>git push origin –delete old_name</p>\n<p>也可以如此操作</p>\n<p>git branch -m old_branch new_branch # Rename branch locally</p>\n<p>git push origin :old_branch # Delete the old branch</p>\n<p>git push –set-upstream origin new_branch 或者git push -u origin new_branch  # Push the new branch, set local branch to track the new remote</p>\n<p>git分支与主干合并操作<br>在主干上合并分支||主干合并分支<br>git merge branch –squash //提交合并后的代码</p>\n<p>git commit -m  ‘合并备注’</p>\n<p>git push //将代码推送到远程仓库</p>\n<p>分支同步主干代码||在分支上合并主干<br>git merge master –squash //提交合并后的代码</p>\n<p>git commit -m  ‘合并备注’ //将代码推送到远程仓库</p>\n<p>git push //将代码推送到远程仓库</p>\n<p>git强制覆盖本地代码<br>与git远程仓库保持一致</p>\n<p>git fetch –all</p>\n<p>git reset –hard origin/master</p>\n<p>git pull</p>\n<p>git强制覆盖本地命令（单条执行）：</p>\n<p>git fetch –all &amp;&amp; git reset –hard origin/master &amp;&amp; git pull</p>\n<p>git修改远程仓库地址<br>方法有三种：</p>\n<p>1.修改命令</p>\n<p>git remote origin set-url [url]</p>\n<p>2.先删后加</p>\n<p>git remote rm origin</p>\n<p>git remote add origin [url]</p>\n<p>3.直接修改config文件</p>\n<p>.git文件夹，找到config，编辑，把就的项目地址替换成新的。</p>\n<p>git 配置<br>git config –list        查看配置列表</p>\n<p>git config –global user.name “xxx”   – 配置用户名，上传本地 repository 到服务器上的时候，在 Github 上会显示这里配置的上传者信息</p>\n<p>git config –global user.email “xxx”    – 配置邮箱<br>配置 sshkey ： 上传代码时使用这个 sshkey 来确认是否有上传权限<br>    1. 创建本地 ssh ： ssh-keygen -t rsa -C “Github 的注册邮箱”<br>    2. 在 Github 中添加这个 sshkey ：<br>        复制  C:\\Documents and Settings\\Administrator.ssh\\id_rsa.pub 文件中的内容；<br>        登录 Github –&gt; Account Setting  –&gt; SSH-KEY –&gt; Add SSH-KEY –&gt; 粘贴id_rsa.pub中的内容；<br>    3. 验证： ssh -T <a href=\"mailto:&#x67;&#x69;&#116;&#64;&#103;&#x69;&#116;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#x6d;\">&#x67;&#x69;&#116;&#64;&#103;&#x69;&#116;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#x6d;</a><br>        出现 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 说明配置成功，可以连接上 Github</p>\n<p>使用 .gitignore 文件忽略指定的内容：</p>\n<pre><code>1. 在本地仓库根目录创建 .gitignore 文件。Win7 下不能直接创建，可以创建 &quot;.gitignore.&quot; 文件，后面的标点自动被忽略；\n2. 过滤文件和文件夹： [Tt]emp/ 过滤 Temp\\temp 文件夹； *.suo 过滤 .suo 文件；\n3. 不过滤文件和文件夹： !*.c\n</code></pre>\n"},{"title":"CUDA安装指南","comment":true,"my":"void","_content":"由于比赛需要，我和小伙伴给好几台机器都配置了cuda环境。安装cuda的时候虽然参考了很多教程，但也避免不了踩坑，因此总结了一个比较完善的方法。\n\n1.更换linux内核\n\nUbuntu16.04一般都是4.15的内核，而cuda9.0不支持此版本的内核，因此需要更换为4.4版本。\n\n(1)查看已安装的内核版本\n\n```bash\ndpkg -l | grep linux-image\n```\n(2)查看当前使用的内核，若为4.15，则需更换为4.4：\n\n```bash\nuname -r\n```\n(3)查看可以更换的内核\n\n```bash\nsudo apt-cache search linux-image\n```\n(4)安装新内核\n\n```bash\nsudo apt-get install linux-image-4.4.0-77-generic linux-image-extra-4.4.0-77-generic\n```\n(5)更新grub引导\n\n```bash\nsudo update-grub\n```\n(6)重启，在grub引导界面进入Ubuntu高级选项，选择4.4内核\n\n(7)安装对应内核版本的headers文件（一定要先装好4.4版本的headers文件再删除多余内核，否则会出现网卡配置等问题）\n\n```bash\nsudo apt-get install linux-headers-$(uname -r)\n```\n(8)删除多余内核\n\n- linux-headers-版本号：内核头文件\n\n- linux-image-版本号：内核映像文件\n\n- linux-image-extra-版本号：内核扩展文件\n\n```bash\nsudo apt-get purge linux-*4.15*\n```\n(9)更新grub引导\n\n```bash\nsudo update-grub\n```\n2.检查CUDA安装环境\n\n(1)GPU是否支持CUDA\n\n```bash\nlspci | grep -i nvidia\n```\n然后去CUDA的官网查看自己的GPU版本是否在CUDA的支持列表中。\n(2)linux版本是否支持CUDA\n\n```bash\nuname -m &&cat /etc/*release\n```\n(3)安装缺少的依赖库\n\n```bash\nsudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev\n```\n3.禁用nouveau驱动\n\n(1)打开/etc/modprobe.d下的blacklist.conf\n\n```bash\nsudo gedit /etc/modprobe.d/blacklist.conf\n```\n(2)在blacklist.conf的末尾添加：\n\n```bash\nblacklist nouveau\noptions nouveau modeset=0\n```\n(3)执行生效并重启(注：这条命令可能不会生效。如果终端运行了一会儿说明已经生效，重启电脑；如果没有生效可以多运行几次。如果还是不行可以先去掉-u执行再加上)\n\n```bash\nsudo update-initramfs -u\n```\n(4)查看是否已禁用\n\n```bash\nlsmod | grep nouveau\n```\n若无内容输出，则表示禁用成功。\n\n4.安装NVIDIA驱动以及cuda\n\n在安装cuda时会自动安装NVIDIA驱动，但是可能会安装失败所以在这里先安装NVIDIA驱动。下载对应gpu版本的NVIDIA驱动、runfile版本的cuda9.0，分别修改文件名为NVIDIA.run、cuda.run，并放在home目录下，方便输入命令。\n\n(1)安装NVIDIA驱动。重启到登录界面时按Ctrl+Alt+F1进入文字用户界面输入自己的用户名和密码，然后运行以下命令并输入密码\n\n```bash\nsudo su\n```\n关闭图形化界面\n\n```bash\nsudo service lightdm stop\n```\n运行\n\n```bash\ninit 3\n```\n```bash\nsh NVIDIA.run\n```\n安装完成后输入以下命令，可以查看显卡驱动的详细信息\n\n```bash\nnvidia-smi\n```\n(2)输入reboot重启，到登录界面会发现分辨率恢复正常（也有特殊情况）。按Ctrl+Alt+F1进入文字用户界面，运行\n\n```bash\nsudo service lightdm stop\n```\n(3)安装cuda9.0\n\n```bash\nsudo sh cuda.run\n```\n等待一段时间到协议界面，按Ctrl+c跳过协议，因为已经先安装好了NVIDIA驱动，NVIDIA Accelerate Graphics Driver选no；其他yes或default。\n\n(4)重启图形化界面\n\n```bash\nsudo service lightdm start\n```\n按Ctrl+Alt+F7返回图形化登录界面并登录。\n\n(5) 检查Device Node Verification\n\n```bash\nls /dev/nvidia*\n```\n\na.显示\n\n/dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidia-modeset\n\n或类似信息（/dev/nvidia*），则安装成功。\n\nb.显示\n\nls: cannot access/dev/nvidia*: No such file or directory\n\n或者 /dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl ，a中的一个或两个，但没有/dev/nvidia-modeset\n\n则需要添加一个启动脚本\n\n```bash\nsudo vi /etc/rc.local\n```\n\n首先把文件的第一行 #!/bin/sh -e 中的 -e 去掉（这步很重要，否则它不会加载文本的内容）\n然后把下列除了 #!/bin/bash 的内容复制到 exit 0 之前，保存退出。\n\n```bash\n#!/bin/bash\n/sbin/modprobe nvidia\n \nif [ \"$?\" -eq 0 ]; then\n# Count the number of NVIDIA controllers found.\nNVDEVS=`lspci | grep -i NVIDIA`\nN3D=`echo \"$NVDEVS\" | grep \"3D controller\" | wc -l`\nNVGA=`echo \"$NVDEVS\" | grep \"VGA compatible controller\" | wc -l`\n \nN=`expr $N3D + $NVGA - 1`\nfor i in `seq 0 $N`; do\nmknod -m 666 /dev/nvidia$i c 195 $i\ndone\n \nmknod -m 666 /dev/nvidiactl c 195 255\n \nelse\nexit 1\nfi\n \n/sbin/modprobe nvidia-uvm\n \nif [ \"$?\" -eq 0 ]; then\n# Find out the major device number used by the nvidia-uvm driver\nD=`grep nvidia-uvm /proc/devices | awk '{print $1}'`\n \nmknod -m 666 /dev/nvidia-uvm c $D 0\nelse\nexit 1\nfi\n```\n\n下次重启时，应该能直接看到/dev目录下的三个nvidia的文件\n\n(6) 设置环境变量\n\n```bash\nsudo gedit /etc/profile\n```\n\n在文件末尾添加以下两行：\n\n```bash\nexport PATH=/usr/local/cuda-9.0/bin${PATH:+:${PATH}}\nexport LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n```\n\n保存文件并重启，因为profile在重启电脑之后才永久生效\n\n(7) 检查上述的环境变量是否设置成功。\n\na.验证驱动版本\n\n```bash\ncat /proc/driver/nvidia/version\n```\n\nb.验证CUDA Toolkit，会输出CUDA的版本信息\n\n\n```bash\nnvcc -V\n```\n\n(8)尝试编译cuda提供samples\n\na.打开终端输入：\n\n```bash\ncd /home/xxx/NVIDIA_CUDA-9.0_Samples\n```\n\n其中xxx是自己的用户名\n\n然后输入：\n\n```bash\nmake\n```\n\n系统就会自动进入到编译过程，整个过程大概需要十几到二十分钟，请耐心等待。如果出现错误的话，系统会立即报错停止。第一次运行时可能会报错，提示的错误信息可能会是系统中没有gcc，解决办法就是通过命令重新安装gcc，在终端输入：\n\n\n```bash\nsudo apt-get install gcc\n```\n\n 安装完gcc后， 再make就正常了。如果编译成功，最后会显示Finished building CUDA samples。\n\nb.运行编译生成的二进制文件\n编译后的二进制文件默认存放在NVIDIA_CUDA-9.0_Samples/bin中，接着输入：\n\n```bash\ncd /home/xxx/NVIDIA_CUDA-9.0_Samples/bin/x86_64/linux/release\n```\n```bash\n./deviceQuery\n```\n最后显示Result = PASS代表成功，若失败 Result = FAIL。\n\nc.最后再检查一下系统和CUDA-Capable device的连接情况\n\n```bash\n./bandwidthTest\n```\n最后显示Result = PASS代表成功，若失败 Result = FAIL。\n\n5.安装CuDNN\n\n在文件所在目录解压，xx是自己的cudnn版本号\n\n```bash\nsudo tar -xzvf cudnn-xx.tgz\n```\n执行\n\n```bash\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include\n```\n```bash\nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\n```\n添加权限\n\n```bash\nsudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*","source":"_posts/安装CUDA.md","raw":"---\ntitle: CUDA安装指南\ncomment: true\ntags: CUDA\nmy: void\n---\n由于比赛需要，我和小伙伴给好几台机器都配置了cuda环境。安装cuda的时候虽然参考了很多教程，但也避免不了踩坑，因此总结了一个比较完善的方法。\n\n1.更换linux内核\n\nUbuntu16.04一般都是4.15的内核，而cuda9.0不支持此版本的内核，因此需要更换为4.4版本。\n\n(1)查看已安装的内核版本\n\n```bash\ndpkg -l | grep linux-image\n```\n(2)查看当前使用的内核，若为4.15，则需更换为4.4：\n\n```bash\nuname -r\n```\n(3)查看可以更换的内核\n\n```bash\nsudo apt-cache search linux-image\n```\n(4)安装新内核\n\n```bash\nsudo apt-get install linux-image-4.4.0-77-generic linux-image-extra-4.4.0-77-generic\n```\n(5)更新grub引导\n\n```bash\nsudo update-grub\n```\n(6)重启，在grub引导界面进入Ubuntu高级选项，选择4.4内核\n\n(7)安装对应内核版本的headers文件（一定要先装好4.4版本的headers文件再删除多余内核，否则会出现网卡配置等问题）\n\n```bash\nsudo apt-get install linux-headers-$(uname -r)\n```\n(8)删除多余内核\n\n- linux-headers-版本号：内核头文件\n\n- linux-image-版本号：内核映像文件\n\n- linux-image-extra-版本号：内核扩展文件\n\n```bash\nsudo apt-get purge linux-*4.15*\n```\n(9)更新grub引导\n\n```bash\nsudo update-grub\n```\n2.检查CUDA安装环境\n\n(1)GPU是否支持CUDA\n\n```bash\nlspci | grep -i nvidia\n```\n然后去CUDA的官网查看自己的GPU版本是否在CUDA的支持列表中。\n(2)linux版本是否支持CUDA\n\n```bash\nuname -m &&cat /etc/*release\n```\n(3)安装缺少的依赖库\n\n```bash\nsudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev\n```\n3.禁用nouveau驱动\n\n(1)打开/etc/modprobe.d下的blacklist.conf\n\n```bash\nsudo gedit /etc/modprobe.d/blacklist.conf\n```\n(2)在blacklist.conf的末尾添加：\n\n```bash\nblacklist nouveau\noptions nouveau modeset=0\n```\n(3)执行生效并重启(注：这条命令可能不会生效。如果终端运行了一会儿说明已经生效，重启电脑；如果没有生效可以多运行几次。如果还是不行可以先去掉-u执行再加上)\n\n```bash\nsudo update-initramfs -u\n```\n(4)查看是否已禁用\n\n```bash\nlsmod | grep nouveau\n```\n若无内容输出，则表示禁用成功。\n\n4.安装NVIDIA驱动以及cuda\n\n在安装cuda时会自动安装NVIDIA驱动，但是可能会安装失败所以在这里先安装NVIDIA驱动。下载对应gpu版本的NVIDIA驱动、runfile版本的cuda9.0，分别修改文件名为NVIDIA.run、cuda.run，并放在home目录下，方便输入命令。\n\n(1)安装NVIDIA驱动。重启到登录界面时按Ctrl+Alt+F1进入文字用户界面输入自己的用户名和密码，然后运行以下命令并输入密码\n\n```bash\nsudo su\n```\n关闭图形化界面\n\n```bash\nsudo service lightdm stop\n```\n运行\n\n```bash\ninit 3\n```\n```bash\nsh NVIDIA.run\n```\n安装完成后输入以下命令，可以查看显卡驱动的详细信息\n\n```bash\nnvidia-smi\n```\n(2)输入reboot重启，到登录界面会发现分辨率恢复正常（也有特殊情况）。按Ctrl+Alt+F1进入文字用户界面，运行\n\n```bash\nsudo service lightdm stop\n```\n(3)安装cuda9.0\n\n```bash\nsudo sh cuda.run\n```\n等待一段时间到协议界面，按Ctrl+c跳过协议，因为已经先安装好了NVIDIA驱动，NVIDIA Accelerate Graphics Driver选no；其他yes或default。\n\n(4)重启图形化界面\n\n```bash\nsudo service lightdm start\n```\n按Ctrl+Alt+F7返回图形化登录界面并登录。\n\n(5) 检查Device Node Verification\n\n```bash\nls /dev/nvidia*\n```\n\na.显示\n\n/dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidia-modeset\n\n或类似信息（/dev/nvidia*），则安装成功。\n\nb.显示\n\nls: cannot access/dev/nvidia*: No such file or directory\n\n或者 /dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl ，a中的一个或两个，但没有/dev/nvidia-modeset\n\n则需要添加一个启动脚本\n\n```bash\nsudo vi /etc/rc.local\n```\n\n首先把文件的第一行 #!/bin/sh -e 中的 -e 去掉（这步很重要，否则它不会加载文本的内容）\n然后把下列除了 #!/bin/bash 的内容复制到 exit 0 之前，保存退出。\n\n```bash\n#!/bin/bash\n/sbin/modprobe nvidia\n \nif [ \"$?\" -eq 0 ]; then\n# Count the number of NVIDIA controllers found.\nNVDEVS=`lspci | grep -i NVIDIA`\nN3D=`echo \"$NVDEVS\" | grep \"3D controller\" | wc -l`\nNVGA=`echo \"$NVDEVS\" | grep \"VGA compatible controller\" | wc -l`\n \nN=`expr $N3D + $NVGA - 1`\nfor i in `seq 0 $N`; do\nmknod -m 666 /dev/nvidia$i c 195 $i\ndone\n \nmknod -m 666 /dev/nvidiactl c 195 255\n \nelse\nexit 1\nfi\n \n/sbin/modprobe nvidia-uvm\n \nif [ \"$?\" -eq 0 ]; then\n# Find out the major device number used by the nvidia-uvm driver\nD=`grep nvidia-uvm /proc/devices | awk '{print $1}'`\n \nmknod -m 666 /dev/nvidia-uvm c $D 0\nelse\nexit 1\nfi\n```\n\n下次重启时，应该能直接看到/dev目录下的三个nvidia的文件\n\n(6) 设置环境变量\n\n```bash\nsudo gedit /etc/profile\n```\n\n在文件末尾添加以下两行：\n\n```bash\nexport PATH=/usr/local/cuda-9.0/bin${PATH:+:${PATH}}\nexport LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n```\n\n保存文件并重启，因为profile在重启电脑之后才永久生效\n\n(7) 检查上述的环境变量是否设置成功。\n\na.验证驱动版本\n\n```bash\ncat /proc/driver/nvidia/version\n```\n\nb.验证CUDA Toolkit，会输出CUDA的版本信息\n\n\n```bash\nnvcc -V\n```\n\n(8)尝试编译cuda提供samples\n\na.打开终端输入：\n\n```bash\ncd /home/xxx/NVIDIA_CUDA-9.0_Samples\n```\n\n其中xxx是自己的用户名\n\n然后输入：\n\n```bash\nmake\n```\n\n系统就会自动进入到编译过程，整个过程大概需要十几到二十分钟，请耐心等待。如果出现错误的话，系统会立即报错停止。第一次运行时可能会报错，提示的错误信息可能会是系统中没有gcc，解决办法就是通过命令重新安装gcc，在终端输入：\n\n\n```bash\nsudo apt-get install gcc\n```\n\n 安装完gcc后， 再make就正常了。如果编译成功，最后会显示Finished building CUDA samples。\n\nb.运行编译生成的二进制文件\n编译后的二进制文件默认存放在NVIDIA_CUDA-9.0_Samples/bin中，接着输入：\n\n```bash\ncd /home/xxx/NVIDIA_CUDA-9.0_Samples/bin/x86_64/linux/release\n```\n```bash\n./deviceQuery\n```\n最后显示Result = PASS代表成功，若失败 Result = FAIL。\n\nc.最后再检查一下系统和CUDA-Capable device的连接情况\n\n```bash\n./bandwidthTest\n```\n最后显示Result = PASS代表成功，若失败 Result = FAIL。\n\n5.安装CuDNN\n\n在文件所在目录解压，xx是自己的cudnn版本号\n\n```bash\nsudo tar -xzvf cudnn-xx.tgz\n```\n执行\n\n```bash\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include\n```\n```bash\nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\n```\n添加权限\n\n```bash\nsudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*","slug":"安装CUDA","published":1,"date":"2022-06-01T15:26:34.329Z","updated":"2022-06-01T16:22:36.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3vwudjl00036wvka0q75olb","content":"<p>由于比赛需要，我和小伙伴给好几台机器都配置了cuda环境。安装cuda的时候虽然参考了很多教程，但也避免不了踩坑，因此总结了一个比较完善的方法。</p>\n<p>1.更换linux内核</p>\n<p>Ubuntu16.04一般都是4.15的内核，而cuda9.0不支持此版本的内核，因此需要更换为4.4版本。</p>\n<p>(1)查看已安装的内核版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -l | grep linux-image</span><br></pre></td></tr></table></figure>\n<p>(2)查看当前使用的内核，若为4.15，则需更换为4.4：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> -r</span><br></pre></td></tr></table></figure>\n<p>(3)查看可以更换的内核</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-cache search linux-image</span><br></pre></td></tr></table></figure>\n<p>(4)安装新内核</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-image-4.4.0-77-generic linux-image-extra-4.4.0-77-generic</span><br></pre></td></tr></table></figure>\n<p>(5)更新grub引导</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n<p>(6)重启，在grub引导界面进入Ubuntu高级选项，选择4.4内核</p>\n<p>(7)安装对应内核版本的headers文件（一定要先装好4.4版本的headers文件再删除多余内核，否则会出现网卡配置等问题）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-headers-$(<span class=\"built_in\">uname</span> -r)</span><br></pre></td></tr></table></figure>\n<p>(8)删除多余内核</p>\n<ul>\n<li><p>linux-headers-版本号：内核头文件</p>\n</li>\n<li><p>linux-image-版本号：内核映像文件</p>\n</li>\n<li><p>linux-image-extra-版本号：内核扩展文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get purge linux-*4.15*</span><br></pre></td></tr></table></figure>\n<p>(9)更新grub引导</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n<p>2.检查CUDA安装环境</p>\n<p>(1)GPU是否支持CUDA</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>\n<p>然后去CUDA的官网查看自己的GPU版本是否在CUDA的支持列表中。<br>(2)linux版本是否支持CUDA</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> -m &amp;&amp;<span class=\"built_in\">cat</span> /etc/*release</span><br></pre></td></tr></table></figure>\n<p>(3)安装缺少的依赖库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev</span><br></pre></td></tr></table></figure>\n<p>3.禁用nouveau驱动</p>\n<p>(1)打开/etc/modprobe.d下的blacklist.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure>\n<p>(2)在blacklist.conf的末尾添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist nouveau</span><br><span class=\"line\">options nouveau modeset=0</span><br></pre></td></tr></table></figure>\n<p>(3)执行生效并重启(注：这条命令可能不会生效。如果终端运行了一会儿说明已经生效，重启电脑；如果没有生效可以多运行几次。如果还是不行可以先去掉-u执行再加上)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>\n<p>(4)查看是否已禁用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>\n<p>若无内容输出，则表示禁用成功。</p>\n<p>4.安装NVIDIA驱动以及cuda</p>\n<p>在安装cuda时会自动安装NVIDIA驱动，但是可能会安装失败所以在这里先安装NVIDIA驱动。下载对应gpu版本的NVIDIA驱动、runfile版本的cuda9.0，分别修改文件名为NVIDIA.run、cuda.run，并放在home目录下，方便输入命令。</p>\n<p>(1)安装NVIDIA驱动。重启到登录界面时按Ctrl+Alt+F1进入文字用户界面输入自己的用户名和密码，然后运行以下命令并输入密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br></pre></td></tr></table></figure>\n<p>关闭图形化界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init 3</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh NVIDIA.run</span><br></pre></td></tr></table></figure>\n<p>安装完成后输入以下命令，可以查看显卡驱动的详细信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n<p>(2)输入reboot重启，到登录界面会发现分辨率恢复正常（也有特殊情况）。按Ctrl+Alt+F1进入文字用户界面，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n<p>(3)安装cuda9.0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh cuda.run</span><br></pre></td></tr></table></figure>\n<p>等待一段时间到协议界面，按Ctrl+c跳过协议，因为已经先安装好了NVIDIA驱动，NVIDIA Accelerate Graphics Driver选no；其他yes或default。</p>\n<p>(4)重启图形化界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm start</span><br></pre></td></tr></table></figure>\n<p>按Ctrl+Alt+F7返回图形化登录界面并登录。</p>\n<p>(5) 检查Device Node Verification</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> /dev/nvidia*</span><br></pre></td></tr></table></figure>\n\n<p>a.显示</p>\n<p>/dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidia-modeset</p>\n<p>或类似信息（/dev/nvidia*），则安装成功。</p>\n<p>b.显示</p>\n<p>ls: cannot access/dev/nvidia*: No such file or directory</p>\n<p>或者 /dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl ，a中的一个或两个，但没有/dev/nvidia-modeset</p>\n<p>则需要添加一个启动脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>首先把文件的第一行 #!/bin/sh -e 中的 -e 去掉（这步很重要，否则它不会加载文本的内容）<br>然后把下列除了 #!/bin/bash 的内容复制到 exit 0 之前，保存退出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">/sbin/modprobe nvidia</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;$?&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\"># Count the number of NVIDIA controllers found.</span></span><br><span class=\"line\">NVDEVS=`lspci | grep -i NVIDIA`</span><br><span class=\"line\">N3D=`<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$NVDEVS</span>&quot;</span> | grep <span class=\"string\">&quot;3D controller&quot;</span> | <span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\">NVGA=`<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$NVDEVS</span>&quot;</span> | grep <span class=\"string\">&quot;VGA compatible controller&quot;</span> | <span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\"> </span><br><span class=\"line\">N=`<span class=\"built_in\">expr</span> <span class=\"variable\">$N3D</span> + <span class=\"variable\">$NVGA</span> - 1`</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `<span class=\"built_in\">seq</span> 0 <span class=\"variable\">$N</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidia<span class=\"variable\">$i</span> c 195 <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidiactl c 195 255</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"> </span><br><span class=\"line\">/sbin/modprobe nvidia-uvm</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;$?&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\"># Find out the major device number used by the nvidia-uvm driver</span></span><br><span class=\"line\">D=`grep nvidia-uvm /proc/devices | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidia-uvm c <span class=\"variable\">$D</span> 0</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p>下次重启时，应该能直接看到/dev目录下的三个nvidia的文件</p>\n<p>(6) 设置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>在文件末尾添加以下两行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/local/cuda-9.0/bin<span class=\"variable\">$&#123;PATH:+:<span class=\"variable\">$&#123;PATH&#125;</span>&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64<span class=\"variable\">$&#123;LD_LIBRARY_PATH:+:<span class=\"variable\">$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>保存文件并重启，因为profile在重启电脑之后才永久生效</p>\n<p>(7) 检查上述的环境变量是否设置成功。</p>\n<p>a.验证驱动版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure>\n\n<p>b.验证CUDA Toolkit，会输出CUDA的版本信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc -V</span><br></pre></td></tr></table></figure>\n\n<p>(8)尝试编译cuda提供samples</p>\n<p>a.打开终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/xxx/NVIDIA_CUDA-9.0_Samples</span><br></pre></td></tr></table></figure>\n\n<p>其中xxx是自己的用户名</p>\n<p>然后输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>系统就会自动进入到编译过程，整个过程大概需要十几到二十分钟，请耐心等待。如果出现错误的话，系统会立即报错停止。第一次运行时可能会报错，提示的错误信息可能会是系统中没有gcc，解决办法就是通过命令重新安装gcc，在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gcc</span><br></pre></td></tr></table></figure>\n\n<p> 安装完gcc后， 再make就正常了。如果编译成功，最后会显示Finished building CUDA samples。</p>\n<p>b.运行编译生成的二进制文件<br>编译后的二进制文件默认存放在NVIDIA_CUDA-9.0_Samples/bin中，接着输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/xxx/NVIDIA_CUDA-9.0_Samples/bin/x86_64/linux/release</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./deviceQuery</span><br></pre></td></tr></table></figure>\n<p>最后显示Result = PASS代表成功，若失败 Result = FAIL。</p>\n<p>c.最后再检查一下系统和CUDA-Capable device的连接情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bandwidthTest</span><br></pre></td></tr></table></figure>\n<p>最后显示Result = PASS代表成功，若失败 Result = FAIL。</p>\n<p>5.安装CuDNN</p>\n<p>在文件所在目录解压，xx是自己的cudnn版本号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -xzvf cudnn-xx.tgz</span><br></pre></td></tr></table></figure>\n<p>执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> cuda/include/cudnn.h /usr/local/cuda/include</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br></pre></td></tr></table></figure>\n<p>添加权限</p>\n<p>```bash<br>sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</p>\n","site":{"data":{}},"length":3998,"excerpt":"","more":"<p>由于比赛需要，我和小伙伴给好几台机器都配置了cuda环境。安装cuda的时候虽然参考了很多教程，但也避免不了踩坑，因此总结了一个比较完善的方法。</p>\n<p>1.更换linux内核</p>\n<p>Ubuntu16.04一般都是4.15的内核，而cuda9.0不支持此版本的内核，因此需要更换为4.4版本。</p>\n<p>(1)查看已安装的内核版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -l | grep linux-image</span><br></pre></td></tr></table></figure>\n<p>(2)查看当前使用的内核，若为4.15，则需更换为4.4：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> -r</span><br></pre></td></tr></table></figure>\n<p>(3)查看可以更换的内核</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-cache search linux-image</span><br></pre></td></tr></table></figure>\n<p>(4)安装新内核</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-image-4.4.0-77-generic linux-image-extra-4.4.0-77-generic</span><br></pre></td></tr></table></figure>\n<p>(5)更新grub引导</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n<p>(6)重启，在grub引导界面进入Ubuntu高级选项，选择4.4内核</p>\n<p>(7)安装对应内核版本的headers文件（一定要先装好4.4版本的headers文件再删除多余内核，否则会出现网卡配置等问题）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-headers-$(<span class=\"built_in\">uname</span> -r)</span><br></pre></td></tr></table></figure>\n<p>(8)删除多余内核</p>\n<ul>\n<li><p>linux-headers-版本号：内核头文件</p>\n</li>\n<li><p>linux-image-版本号：内核映像文件</p>\n</li>\n<li><p>linux-image-extra-版本号：内核扩展文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get purge linux-*4.15*</span><br></pre></td></tr></table></figure>\n<p>(9)更新grub引导</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n<p>2.检查CUDA安装环境</p>\n<p>(1)GPU是否支持CUDA</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure>\n<p>然后去CUDA的官网查看自己的GPU版本是否在CUDA的支持列表中。<br>(2)linux版本是否支持CUDA</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> -m &amp;&amp;<span class=\"built_in\">cat</span> /etc/*release</span><br></pre></td></tr></table></figure>\n<p>(3)安装缺少的依赖库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev</span><br></pre></td></tr></table></figure>\n<p>3.禁用nouveau驱动</p>\n<p>(1)打开/etc/modprobe.d下的blacklist.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure>\n<p>(2)在blacklist.conf的末尾添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist nouveau</span><br><span class=\"line\">options nouveau modeset=0</span><br></pre></td></tr></table></figure>\n<p>(3)执行生效并重启(注：这条命令可能不会生效。如果终端运行了一会儿说明已经生效，重启电脑；如果没有生效可以多运行几次。如果还是不行可以先去掉-u执行再加上)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>\n<p>(4)查看是否已禁用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>\n<p>若无内容输出，则表示禁用成功。</p>\n<p>4.安装NVIDIA驱动以及cuda</p>\n<p>在安装cuda时会自动安装NVIDIA驱动，但是可能会安装失败所以在这里先安装NVIDIA驱动。下载对应gpu版本的NVIDIA驱动、runfile版本的cuda9.0，分别修改文件名为NVIDIA.run、cuda.run，并放在home目录下，方便输入命令。</p>\n<p>(1)安装NVIDIA驱动。重启到登录界面时按Ctrl+Alt+F1进入文字用户界面输入自己的用户名和密码，然后运行以下命令并输入密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br></pre></td></tr></table></figure>\n<p>关闭图形化界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init 3</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh NVIDIA.run</span><br></pre></td></tr></table></figure>\n<p>安装完成后输入以下命令，可以查看显卡驱动的详细信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n<p>(2)输入reboot重启，到登录界面会发现分辨率恢复正常（也有特殊情况）。按Ctrl+Alt+F1进入文字用户界面，运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm stop</span><br></pre></td></tr></table></figure>\n<p>(3)安装cuda9.0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh cuda.run</span><br></pre></td></tr></table></figure>\n<p>等待一段时间到协议界面，按Ctrl+c跳过协议，因为已经先安装好了NVIDIA驱动，NVIDIA Accelerate Graphics Driver选no；其他yes或default。</p>\n<p>(4)重启图形化界面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service lightdm start</span><br></pre></td></tr></table></figure>\n<p>按Ctrl+Alt+F7返回图形化登录界面并登录。</p>\n<p>(5) 检查Device Node Verification</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> /dev/nvidia*</span><br></pre></td></tr></table></figure>\n\n<p>a.显示</p>\n<p>/dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidia-modeset</p>\n<p>或类似信息（/dev/nvidia*），则安装成功。</p>\n<p>b.显示</p>\n<p>ls: cannot access/dev/nvidia*: No such file or directory</p>\n<p>或者 /dev/nvidia0&nbsp;&nbsp;&nbsp;&nbsp; /dev/nvidiactl ，a中的一个或两个，但没有/dev/nvidia-modeset</p>\n<p>则需要添加一个启动脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>首先把文件的第一行 #!/bin/sh -e 中的 -e 去掉（这步很重要，否则它不会加载文本的内容）<br>然后把下列除了 #!/bin/bash 的内容复制到 exit 0 之前，保存退出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">/sbin/modprobe nvidia</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;$?&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\"># Count the number of NVIDIA controllers found.</span></span><br><span class=\"line\">NVDEVS=`lspci | grep -i NVIDIA`</span><br><span class=\"line\">N3D=`<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$NVDEVS</span>&quot;</span> | grep <span class=\"string\">&quot;3D controller&quot;</span> | <span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\">NVGA=`<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$NVDEVS</span>&quot;</span> | grep <span class=\"string\">&quot;VGA compatible controller&quot;</span> | <span class=\"built_in\">wc</span> -l`</span><br><span class=\"line\"> </span><br><span class=\"line\">N=`<span class=\"built_in\">expr</span> <span class=\"variable\">$N3D</span> + <span class=\"variable\">$NVGA</span> - 1`</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `<span class=\"built_in\">seq</span> 0 <span class=\"variable\">$N</span>`; <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidia<span class=\"variable\">$i</span> c 195 <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidiactl c 195 255</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"> </span><br><span class=\"line\">/sbin/modprobe nvidia-uvm</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;$?&quot;</span> -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\"># Find out the major device number used by the nvidia-uvm driver</span></span><br><span class=\"line\">D=`grep nvidia-uvm /proc/devices | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">mknod</span> -m 666 /dev/nvidia-uvm c <span class=\"variable\">$D</span> 0</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p>下次重启时，应该能直接看到/dev目录下的三个nvidia的文件</p>\n<p>(6) 设置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>在文件末尾添加以下两行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/local/cuda-9.0/bin<span class=\"variable\">$&#123;PATH:+:<span class=\"variable\">$&#123;PATH&#125;</span>&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64<span class=\"variable\">$&#123;LD_LIBRARY_PATH:+:<span class=\"variable\">$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>保存文件并重启，因为profile在重启电脑之后才永久生效</p>\n<p>(7) 检查上述的环境变量是否设置成功。</p>\n<p>a.验证驱动版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure>\n\n<p>b.验证CUDA Toolkit，会输出CUDA的版本信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc -V</span><br></pre></td></tr></table></figure>\n\n<p>(8)尝试编译cuda提供samples</p>\n<p>a.打开终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/xxx/NVIDIA_CUDA-9.0_Samples</span><br></pre></td></tr></table></figure>\n\n<p>其中xxx是自己的用户名</p>\n<p>然后输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>系统就会自动进入到编译过程，整个过程大概需要十几到二十分钟，请耐心等待。如果出现错误的话，系统会立即报错停止。第一次运行时可能会报错，提示的错误信息可能会是系统中没有gcc，解决办法就是通过命令重新安装gcc，在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gcc</span><br></pre></td></tr></table></figure>\n\n<p> 安装完gcc后， 再make就正常了。如果编译成功，最后会显示Finished building CUDA samples。</p>\n<p>b.运行编译生成的二进制文件<br>编译后的二进制文件默认存放在NVIDIA_CUDA-9.0_Samples/bin中，接着输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/xxx/NVIDIA_CUDA-9.0_Samples/bin/x86_64/linux/release</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./deviceQuery</span><br></pre></td></tr></table></figure>\n<p>最后显示Result = PASS代表成功，若失败 Result = FAIL。</p>\n<p>c.最后再检查一下系统和CUDA-Capable device的连接情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bandwidthTest</span><br></pre></td></tr></table></figure>\n<p>最后显示Result = PASS代表成功，若失败 Result = FAIL。</p>\n<p>5.安装CuDNN</p>\n<p>在文件所在目录解压，xx是自己的cudnn版本号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -xzvf cudnn-xx.tgz</span><br></pre></td></tr></table></figure>\n<p>执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> cuda/include/cudnn.h /usr/local/cuda/include</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br></pre></td></tr></table></figure>\n<p>添加权限</p>\n<p>```bash<br>sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl3vwudji00016wvk76025jdp","tag_id":"cl3vwudjn00046wvkh2mpekhx","_id":"cl3vwudjp00066wvkhys8b7gf"},{"post_id":"cl3vwudjl00036wvka0q75olb","tag_id":"cl3vwudjp00056wvkbasofpgc","_id":"cl3vwudjp00076wvkgynsa5hw"}],"Tag":[{"name":"Git","_id":"cl3vwudjn00046wvkh2mpekhx"},{"name":"CUDA","_id":"cl3vwudjp00056wvkbasofpgc"}]}}